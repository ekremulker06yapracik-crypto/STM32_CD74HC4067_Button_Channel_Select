
MuxButonSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000604c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08006224  08006224  00007224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006644  08006644  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006644  08006644  0000800c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006644  08006644  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006644  08006644  00007644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006648  08006648  00007648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800664c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000000c  08006658  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08006658  00008270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115c1  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ef  00000000  00000000  000195fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d56  00000000  00000000  0001cd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e74  00000000  00000000  0001da96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128f3  00000000  00000000  0004590a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010eb2c  00000000  00000000  000581fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166d29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b48  00000000  00000000  00166d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0016b8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800620c 	.word	0x0800620c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800620c 	.word	0x0800620c

08000218 <SetMuxChannel.1>:
  MX_TIM2_Init();
  MX_TIM1_Init();
  MX_ADC4_Init();
  /* USER CODE BEGIN 2 */
  void SetMuxChannel(uint8_t channel)
  {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
 8000222:	f8c7 c000 	str.w	ip, [r7]
    if (channel > 15) return;
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	2b0f      	cmp	r3, #15
 800022a:	d842      	bhi.n	80002b2 <SetMuxChannel.1+0x9a>

    HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, muxChannel[channel][0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	4a23      	ldr	r2, [pc, #140]	@ (80002bc <SetMuxChannel.1+0xa4>)
 8000230:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000234:	2b00      	cmp	r3, #0
 8000236:	bf14      	ite	ne
 8000238:	2301      	movne	r3, #1
 800023a:	2300      	moveq	r3, #0
 800023c:	b2db      	uxtb	r3, r3
 800023e:	461a      	mov	r2, r3
 8000240:	2101      	movs	r1, #1
 8000242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000246:	f002 fe71 	bl	8002f2c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, muxChannel[channel][1] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	4a1b      	ldr	r2, [pc, #108]	@ (80002bc <SetMuxChannel.1+0xa4>)
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	4413      	add	r3, r2
 8000252:	785b      	ldrb	r3, [r3, #1]
 8000254:	2b00      	cmp	r3, #0
 8000256:	bf14      	ite	ne
 8000258:	2301      	movne	r3, #1
 800025a:	2300      	moveq	r3, #0
 800025c:	b2db      	uxtb	r3, r3
 800025e:	461a      	mov	r2, r3
 8000260:	2102      	movs	r1, #2
 8000262:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000266:	f002 fe61 	bl	8002f2c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, muxChannel[channel][2] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	4a13      	ldr	r2, [pc, #76]	@ (80002bc <SetMuxChannel.1+0xa4>)
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	4413      	add	r3, r2
 8000272:	789b      	ldrb	r3, [r3, #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	bf14      	ite	ne
 8000278:	2301      	movne	r3, #1
 800027a:	2300      	moveq	r3, #0
 800027c:	b2db      	uxtb	r3, r3
 800027e:	461a      	mov	r2, r3
 8000280:	2110      	movs	r1, #16
 8000282:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000286:	f002 fe51 	bl	8002f2c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, muxChannel[channel][3] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4a0b      	ldr	r2, [pc, #44]	@ (80002bc <SetMuxChannel.1+0xa4>)
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	4413      	add	r3, r2
 8000292:	78db      	ldrb	r3, [r3, #3]
 8000294:	2b00      	cmp	r3, #0
 8000296:	bf14      	ite	ne
 8000298:	2301      	movne	r3, #1
 800029a:	2300      	moveq	r3, #0
 800029c:	b2db      	uxtb	r3, r3
 800029e:	461a      	mov	r2, r3
 80002a0:	2101      	movs	r1, #1
 80002a2:	4807      	ldr	r0, [pc, #28]	@ (80002c0 <SetMuxChannel.1+0xa8>)
 80002a4:	f002 fe42 	bl	8002f2c <HAL_GPIO_WritePin>
    HAL_Delay(300); // Kanal deÄŸiÅŸimi iÃ§in gec
 80002a8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80002ac:	f000 fd82 	bl	8000db4 <HAL_Delay>
 80002b0:	e000      	b.n	80002b4 <SetMuxChannel.1+0x9c>
    if (channel > 15) return;
 80002b2:	bf00      	nop
  }
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	08006224 	.word	0x08006224
 80002c0:	48000400 	.word	0x48000400

080002c4 <main>:
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af02      	add	r7, sp, #8
int main(void)
 80002ca:	f107 0310 	add.w	r3, r7, #16
 80002ce:	603b      	str	r3, [r7, #0]
  HAL_Init();
 80002d0:	f000 fcff 	bl	8000cd2 <HAL_Init>
  SystemClock_Config();
 80002d4:	f000 f892 	bl	80003fc <SystemClock_Config>
  MX_GPIO_Init();
 80002d8:	f000 faa2 	bl	8000820 <MX_GPIO_Init>
  MX_DMA_Init();
 80002dc:	f000 fa76 	bl	80007cc <MX_DMA_Init>
  MX_DAC2_Init();
 80002e0:	f000 f93e 	bl	8000560 <MX_DAC2_Init>
  MX_TIM2_Init();
 80002e4:	f000 fa26 	bl	8000734 <MX_TIM2_Init>
  MX_TIM1_Init();
 80002e8:	f000 f974 	bl	80005d4 <MX_TIM1_Init>
  MX_ADC4_Init();
 80002ec:	f000 f8d2 	bl	8000494 <MX_ADC4_Init>
      sin_wave[i] = (uint16_t)((sinf(angle) + 1.0f) * 2047.0f); // 12-bit DAC
    }
  }


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002f0:	2100      	movs	r1, #0
 80002f2:	481c      	ldr	r0, [pc, #112]	@ (8000364 <main+0xa0>)
 80002f4:	f003 ff60 	bl	80041b8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80002f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000364 <main+0xa0>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000300:	635a      	str	r2, [r3, #52]	@ 0x34
  generate_sine_table();
 8000302:	463b      	mov	r3, r7
 8000304:	469c      	mov	ip, r3
 8000306:	f000 f837 	bl	8000378 <generate_sine_table.0>
  HAL_TIM_Base_Start(&htim2);
 800030a:	4817      	ldr	r0, [pc, #92]	@ (8000368 <main+0xa4>)
 800030c:	f003 fe82 	bl	8004014 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8000310:	2100      	movs	r1, #0
 8000312:	4816      	ldr	r0, [pc, #88]	@ (800036c <main+0xa8>)
 8000314:	f001 fe74 	bl	8002000 <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac2, DAC_CHANNEL_1, (uint32_t*)sin_wave, SINE_RESOLUTION, DAC_ALIGN_12B_R);
 8000318:	2300      	movs	r3, #0
 800031a:	9300      	str	r3, [sp, #0]
 800031c:	2364      	movs	r3, #100	@ 0x64
 800031e:	4a14      	ldr	r2, [pc, #80]	@ (8000370 <main+0xac>)
 8000320:	2100      	movs	r1, #0
 8000322:	4812      	ldr	r0, [pc, #72]	@ (800036c <main+0xa8>)
 8000324:	f001 fed8 	bl	80020d8 <HAL_DAC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    for (int i = 0; i < 16; i++)
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	e009      	b.n	8000342 <main+0x7e>
    {
      // Multiplexer kanalÄ±nÄ± seÃ§
      SetMuxChannel(i);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	463a      	mov	r2, r7
 8000334:	4694      	mov	ip, r2
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ff6e 	bl	8000218 <SetMuxChannel.1>
    for (int i = 0; i < 16; i++)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	3301      	adds	r3, #1
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2b0f      	cmp	r3, #15
 8000346:	ddf2      	ble.n	800032e <main+0x6a>
           // ADC dÃ¶nÃ¼ÅŸÃ¼mÃ¼nÃ¼n tamamlanmasÄ±nÄ± bekle

         }
       count++;
 8000348:	4b0a      	ldr	r3, [pc, #40]	@ (8000374 <main+0xb0>)
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	3301      	adds	r3, #1
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <main+0xb0>)
 8000352:	801a      	strh	r2, [r3, #0]
    if (count > 15) count = 0;
 8000354:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <main+0xb0>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	2b0f      	cmp	r3, #15
 800035a:	d9e5      	bls.n	8000328 <main+0x64>
 800035c:	4b05      	ldr	r3, [pc, #20]	@ (8000374 <main+0xb0>)
 800035e:	2200      	movs	r2, #0
 8000360:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 16; i++)
 8000362:	e7e1      	b.n	8000328 <main+0x64>
 8000364:	20000108 	.word	0x20000108
 8000368:	20000154 	.word	0x20000154
 800036c:	20000094 	.word	0x20000094
 8000370:	200001a0 	.word	0x200001a0
 8000374:	20000268 	.word	0x20000268

08000378 <generate_sine_table.0>:
  {
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	f8c7 c004 	str.w	ip, [r7, #4]
    for (int i = 0; i < SINE_RESOLUTION; i++)
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	e028      	b.n	80003da <generate_sine_table.0+0x62>
      float angle = (2.0f * 3.14159265f * i) / SINE_RESOLUTION;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	ee07 3a90 	vmov	s15, r3
 800038e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000392:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80003ec <generate_sine_table.0+0x74>
 8000396:	ee27 7a87 	vmul.f32	s14, s15, s14
 800039a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80003f0 <generate_sine_table.0+0x78>
 800039e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80003a2:	edc7 7a02 	vstr	s15, [r7, #8]
      sin_wave[i] = (uint16_t)((sinf(angle) + 1.0f) * 2047.0f); // 12-bit DAC
 80003a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80003aa:	f005 f9ff 	bl	80057ac <sinf>
 80003ae:	eef0 7a40 	vmov.f32	s15, s0
 80003b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80003b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003ba:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80003f4 <generate_sine_table.0+0x7c>
 80003be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003c6:	ee17 3a90 	vmov	r3, s15
 80003ca:	b299      	uxth	r1, r3
 80003cc:	4a0a      	ldr	r2, [pc, #40]	@ (80003f8 <generate_sine_table.0+0x80>)
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < SINE_RESOLUTION; i++)
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	3301      	adds	r3, #1
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	2b63      	cmp	r3, #99	@ 0x63
 80003de:	ddd3      	ble.n	8000388 <generate_sine_table.0+0x10>
  }
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40c90fdb 	.word	0x40c90fdb
 80003f0:	42c80000 	.word	0x42c80000
 80003f4:	44ffe000 	.word	0x44ffe000
 80003f8:	200001a0 	.word	0x200001a0

080003fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b094      	sub	sp, #80	@ 0x50
 8000400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000402:	f107 0318 	add.w	r3, r7, #24
 8000406:	2238      	movs	r2, #56	@ 0x38
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f005 f9a2 	bl	8005754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800041e:	2000      	movs	r0, #0
 8000420:	f002 fd9c 	bl	8002f5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000424:	2302      	movs	r3, #2
 8000426:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000428:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800042c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042e:	2340      	movs	r3, #64	@ 0x40
 8000430:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000432:	2302      	movs	r3, #2
 8000434:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000436:	2302      	movs	r3, #2
 8000438:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800043a:	2304      	movs	r3, #4
 800043c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800043e:	2355      	movs	r3, #85	@ 0x55
 8000440:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000442:	2302      	movs	r3, #2
 8000444:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000446:	2302      	movs	r3, #2
 8000448:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800044a:	2302      	movs	r3, #2
 800044c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044e:	f107 0318 	add.w	r3, r7, #24
 8000452:	4618      	mov	r0, r3
 8000454:	f002 fe36 	bl	80030c4 <HAL_RCC_OscConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800045e:	f000 fa59 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000462:	230f      	movs	r3, #15
 8000464:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000466:	2303      	movs	r3, #3
 8000468:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2104      	movs	r1, #4
 800047a:	4618      	mov	r0, r3
 800047c:	f003 f934 	bl	80036e8 <HAL_RCC_ClockConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000486:	f000 fa45 	bl	8000914 <Error_Handler>
  }
}
 800048a:	bf00      	nop
 800048c:	3750      	adds	r7, #80	@ 0x50
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800049a:	463b      	mov	r3, r7
 800049c:	2220      	movs	r2, #32
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f005 f957 	bl	8005754 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80004a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004a8:	4a2b      	ldr	r2, [pc, #172]	@ (8000558 <MX_ADC4_Init+0xc4>)
 80004aa:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004ac:	4b29      	ldr	r3, [pc, #164]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80004b2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80004b4:	4b27      	ldr	r3, [pc, #156]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004ba:	4b26      	ldr	r3, [pc, #152]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80004c0:	4b24      	ldr	r3, [pc, #144]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004c6:	4b23      	ldr	r3, [pc, #140]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004cc:	4b21      	ldr	r3, [pc, #132]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004ce:	2204      	movs	r2, #4
 80004d0:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80004d2:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80004d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004da:	2201      	movs	r2, #1
 80004dc:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80004de:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ec:	4b19      	ldr	r3, [pc, #100]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f2:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80004f8:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_ADC4_Init+0xc0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000500:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <MX_ADC4_Init+0xc0>)
 8000502:	2200      	movs	r2, #0
 8000504:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000506:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <MX_ADC4_Init+0xc0>)
 8000508:	2200      	movs	r2, #0
 800050a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800050e:	4811      	ldr	r0, [pc, #68]	@ (8000554 <MX_ADC4_Init+0xc0>)
 8000510:	f000 fe48 	bl	80011a4 <HAL_ADC_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800051a:	f000 f9fb 	bl	8000914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800051e:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <MX_ADC4_Init+0xc8>)
 8000520:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000522:	2306      	movs	r3, #6
 8000524:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800052a:	237f      	movs	r3, #127	@ 0x7f
 800052c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800052e:	2304      	movs	r3, #4
 8000530:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000536:	463b      	mov	r3, r7
 8000538:	4619      	mov	r1, r3
 800053a:	4806      	ldr	r0, [pc, #24]	@ (8000554 <MX_ADC4_Init+0xc0>)
 800053c:	f000 ffee 	bl	800151c <HAL_ADC_ConfigChannel>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000546:	f000 f9e5 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800054a:	bf00      	nop
 800054c:	3720      	adds	r7, #32
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000028 	.word	0x20000028
 8000558:	50000500 	.word	0x50000500
 800055c:	0c900008 	.word	0x0c900008

08000560 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	@ 0x30
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2230      	movs	r2, #48	@ 0x30
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f005 f8f1 	bl	8005754 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000572:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <MX_DAC2_Init+0x6c>)
 8000574:	4a16      	ldr	r2, [pc, #88]	@ (80005d0 <MX_DAC2_Init+0x70>)
 8000576:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000578:	4814      	ldr	r0, [pc, #80]	@ (80005cc <MX_DAC2_Init+0x6c>)
 800057a:	f001 fd1e 	bl	8001fba <HAL_DAC_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000584:	f000 f9c6 	bl	8000914 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000588:	2302      	movs	r3, #2
 800058a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800058c:	2300      	movs	r3, #0
 800058e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000598:	2312      	movs	r3, #18
 800059a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	@ (80005cc <MX_DAC2_Init+0x6c>)
 80005b4:	f001 fe82 	bl	80022bc <HAL_DAC_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80005be:	f000 f9a9 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	3730      	adds	r7, #48	@ 0x30
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000094 	.word	0x20000094
 80005d0:	50000c00 	.word	0x50000c00

080005d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b09c      	sub	sp, #112	@ 0x70
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2234      	movs	r2, #52	@ 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 f8a0 	bl	8005754 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000614:	4b45      	ldr	r3, [pc, #276]	@ (800072c <MX_TIM1_Init+0x158>)
 8000616:	4a46      	ldr	r2, [pc, #280]	@ (8000730 <MX_TIM1_Init+0x15c>)
 8000618:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800061a:	4b44      	ldr	r3, [pc, #272]	@ (800072c <MX_TIM1_Init+0x158>)
 800061c:	22a9      	movs	r2, #169	@ 0xa9
 800061e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000620:	4b42      	ldr	r3, [pc, #264]	@ (800072c <MX_TIM1_Init+0x158>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000626:	4b41      	ldr	r3, [pc, #260]	@ (800072c <MX_TIM1_Init+0x158>)
 8000628:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800062c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062e:	4b3f      	ldr	r3, [pc, #252]	@ (800072c <MX_TIM1_Init+0x158>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000634:	4b3d      	ldr	r3, [pc, #244]	@ (800072c <MX_TIM1_Init+0x158>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063a:	4b3c      	ldr	r3, [pc, #240]	@ (800072c <MX_TIM1_Init+0x158>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000640:	483a      	ldr	r0, [pc, #232]	@ (800072c <MX_TIM1_Init+0x158>)
 8000642:	f003 fc8f 	bl	8003f64 <HAL_TIM_Base_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800064c:	f000 f962 	bl	8000914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000654:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000656:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800065a:	4619      	mov	r1, r3
 800065c:	4833      	ldr	r0, [pc, #204]	@ (800072c <MX_TIM1_Init+0x158>)
 800065e:	f004 f921 	bl	80048a4 <HAL_TIM_ConfigClockSource>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000668:	f000 f954 	bl	8000914 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800066c:	482f      	ldr	r0, [pc, #188]	@ (800072c <MX_TIM1_Init+0x158>)
 800066e:	f003 fd41 	bl	80040f4 <HAL_TIM_PWM_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000678:	f000 f94c 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067c:	2300      	movs	r3, #0
 800067e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000688:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800068c:	4619      	mov	r1, r3
 800068e:	4827      	ldr	r0, [pc, #156]	@ (800072c <MX_TIM1_Init+0x158>)
 8000690:	f004 fef0 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800069a:	f000 f93b 	bl	8000914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800069e:	2360      	movs	r3, #96	@ 0x60
 80006a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006a6:	2300      	movs	r3, #0
 80006a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006aa:	2300      	movs	r3, #0
 80006ac:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006b2:	2300      	movs	r3, #0
 80006b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006be:	2200      	movs	r2, #0
 80006c0:	4619      	mov	r1, r3
 80006c2:	481a      	ldr	r0, [pc, #104]	@ (800072c <MX_TIM1_Init+0x158>)
 80006c4:	f003 ffda 	bl	800467c <HAL_TIM_PWM_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80006ce:	f000 f921 	bl	8000914 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4619      	mov	r1, r3
 800070e:	4807      	ldr	r0, [pc, #28]	@ (800072c <MX_TIM1_Init+0x158>)
 8000710:	f004 ff46 	bl	80055a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800071a:	f000 f8fb 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800071e:	4803      	ldr	r0, [pc, #12]	@ (800072c <MX_TIM1_Init+0x158>)
 8000720:	f000 fa20 	bl	8000b64 <HAL_TIM_MspPostInit>

}
 8000724:	bf00      	nop
 8000726:	3770      	adds	r7, #112	@ 0x70
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000108 	.word	0x20000108
 8000730:	40012c00 	.word	0x40012c00

08000734 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <MX_TIM2_Init+0x94>)
 8000754:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000758:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_TIM2_Init+0x94>)
 800075c:	22a9      	movs	r2, #169	@ 0xa9
 800075e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_TIM2_Init+0x94>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000766:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_TIM2_Init+0x94>)
 8000768:	2263      	movs	r2, #99	@ 0x63
 800076a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076c:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_TIM2_Init+0x94>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <MX_TIM2_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000778:	4813      	ldr	r0, [pc, #76]	@ (80007c8 <MX_TIM2_Init+0x94>)
 800077a:	f003 fbf3 	bl	8003f64 <HAL_TIM_Base_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000784:	f000 f8c6 	bl	8000914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	4619      	mov	r1, r3
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <MX_TIM2_Init+0x94>)
 8000796:	f004 f885 	bl	80048a4 <HAL_TIM_ConfigClockSource>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007a0:	f000 f8b8 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007a4:	2320      	movs	r3, #32
 80007a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_TIM2_Init+0x94>)
 80007b2:	f004 fe5f 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007bc:	f000 f8aa 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000154 	.word	0x20000154

080007cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <MX_DMA_Init+0x50>)
 80007d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007d6:	4a11      	ldr	r2, [pc, #68]	@ (800081c <MX_DMA_Init+0x50>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_DMA_Init+0x50>)
 80007e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_DMA_Init+0x50>)
 80007ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ee:	4a0b      	ldr	r2, [pc, #44]	@ (800081c <MX_DMA_Init+0x50>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_DMA_Init+0x50>)
 80007f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	200b      	movs	r0, #11
 8000808:	f001 fba3 	bl	8001f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800080c:	200b      	movs	r0, #11
 800080e:	f001 fbba 	bl	8001f86 <HAL_NVIC_EnableIRQ>

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b34      	ldr	r3, [pc, #208]	@ (8000908 <MX_GPIO_Init+0xe8>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a33      	ldr	r2, [pc, #204]	@ (8000908 <MX_GPIO_Init+0xe8>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b31      	ldr	r3, [pc, #196]	@ (8000908 <MX_GPIO_Init+0xe8>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	4b2e      	ldr	r3, [pc, #184]	@ (8000908 <MX_GPIO_Init+0xe8>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a2d      	ldr	r2, [pc, #180]	@ (8000908 <MX_GPIO_Init+0xe8>)
 8000854:	f043 0320 	orr.w	r3, r3, #32
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b2b      	ldr	r3, [pc, #172]	@ (8000908 <MX_GPIO_Init+0xe8>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0320 	and.w	r3, r3, #32
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b28      	ldr	r3, [pc, #160]	@ (8000908 <MX_GPIO_Init+0xe8>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a27      	ldr	r2, [pc, #156]	@ (8000908 <MX_GPIO_Init+0xe8>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b25      	ldr	r3, [pc, #148]	@ (8000908 <MX_GPIO_Init+0xe8>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b22      	ldr	r3, [pc, #136]	@ (8000908 <MX_GPIO_Init+0xe8>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <MX_GPIO_Init+0xe8>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <MX_GPIO_Init+0xe8>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S0_Pin|S1_Pin|S2_Pin|LED_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2133      	movs	r1, #51	@ 0x33
 800089a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089e:	f002 fb45 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2101      	movs	r1, #1
 80008a6:	4819      	ldr	r0, [pc, #100]	@ (800090c <MX_GPIO_Init+0xec>)
 80008a8:	f002 fb40 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UserButton_Pin */
  GPIO_InitStruct.Pin = UserButton_Pin;
 80008ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4813      	ldr	r0, [pc, #76]	@ (8000910 <MX_GPIO_Init+0xf0>)
 80008c2:	f002 f9b1 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin LED_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|LED_Pin;
 80008c6:	2333      	movs	r3, #51	@ 0x33
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e0:	f002 f9a2 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 80008e4:	2301      	movs	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4804      	ldr	r0, [pc, #16]	@ (800090c <MX_GPIO_Init+0xec>)
 80008fc:	f002 f994 	bl	8002c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	@ 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000
 800090c:	48000400 	.word	0x48000400
 8000910:	48000800 	.word	0x48000800

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092a:	4a0e      	ldr	r2, [pc, #56]	@ (8000964 <HAL_MspInit+0x44>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6613      	str	r3, [r2, #96]	@ 0x60
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <HAL_MspInit+0x44>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000942:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <HAL_MspInit+0x44>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000948:	6593      	str	r3, [r2, #88]	@ 0x58
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_MspInit+0x44>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000956:	f002 fba5 	bl	80030a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09e      	sub	sp, #120	@ 0x78
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	2254      	movs	r2, #84	@ 0x54
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f004 fee3 	bl	8005754 <memset>
  if(hadc->Instance==ADC4)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a1e      	ldr	r2, [pc, #120]	@ (8000a0c <HAL_ADC_MspInit+0xa4>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d134      	bne.n	8000a02 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000998:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800099c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800099e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80009a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 f88d 	bl	8003ac8 <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009b4:	f7ff ffae 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 80009b8:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <HAL_ADC_MspInit+0xa8>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009bc:	4a14      	ldr	r2, [pc, #80]	@ (8000a10 <HAL_ADC_MspInit+0xa8>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <HAL_ADC_MspInit+0xa8>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <HAL_ADC_MspInit+0xa8>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000a10 <HAL_ADC_MspInit+0xa8>)
 80009d6:	f043 0302 	orr.w	r3, r3, #2
 80009da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <HAL_ADC_MspInit+0xa8>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC4 GPIO Configuration
    PB12     ------> ADC4_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ee:	2303      	movs	r3, #3
 80009f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <HAL_ADC_MspInit+0xac>)
 80009fe:	f002 f913 	bl	8002c28 <HAL_GPIO_Init>

    /* USER CODE END ADC4_MspInit 1 */

  }

}
 8000a02:	bf00      	nop
 8000a04:	3778      	adds	r7, #120	@ 0x78
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	50000500 	.word	0x50000500
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48000400 	.word	0x48000400

08000a18 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a2b      	ldr	r2, [pc, #172]	@ (8000ae4 <HAL_DAC_MspInit+0xcc>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d14f      	bne.n	8000ada <HAL_DAC_MspInit+0xc2>
  {
    /* USER CODE BEGIN DAC2_MspInit 0 */

    /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae8 <HAL_DAC_MspInit+0xd0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ae8 <HAL_DAC_MspInit+0xd0>)
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b28      	ldr	r3, [pc, #160]	@ (8000ae8 <HAL_DAC_MspInit+0xd0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b25      	ldr	r3, [pc, #148]	@ (8000ae8 <HAL_DAC_MspInit+0xd0>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a24      	ldr	r2, [pc, #144]	@ (8000ae8 <HAL_DAC_MspInit+0xd0>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ae8 <HAL_DAC_MspInit+0xd0>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a6a:	2340      	movs	r3, #64	@ 0x40
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a80:	f002 f8d2 	bl	8002c28 <HAL_GPIO_Init>

    /* DAC2 DMA Init */
    /* DAC2_CH1 Init */
    hdma_dac2_ch1.Instance = DMA1_Channel1;
 8000a84:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <HAL_DAC_MspInit+0xd4>)
 8000a86:	4a1a      	ldr	r2, [pc, #104]	@ (8000af0 <HAL_DAC_MspInit+0xd8>)
 8000a88:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <HAL_DAC_MspInit+0xd4>)
 8000a8c:	2229      	movs	r2, #41	@ 0x29
 8000a8e:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a90:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <HAL_DAC_MspInit+0xd4>)
 8000a92:	2210      	movs	r2, #16
 8000a94:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <HAL_DAC_MspInit+0xd4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a9c:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <HAL_DAC_MspInit+0xd4>)
 8000a9e:	2280      	movs	r2, #128	@ 0x80
 8000aa0:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aa2:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <HAL_DAC_MspInit+0xd4>)
 8000aa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aa8:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <HAL_DAC_MspInit+0xd4>)
 8000aac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ab0:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <HAL_DAC_MspInit+0xd4>)
 8000ab4:	2220      	movs	r2, #32
 8000ab6:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <HAL_DAC_MspInit+0xd4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000abe:	480b      	ldr	r0, [pc, #44]	@ (8000aec <HAL_DAC_MspInit+0xd4>)
 8000ac0:	f001 fe40 	bl	8002744 <HAL_DMA_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000aca:	f7ff ff23 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a06      	ldr	r2, [pc, #24]	@ (8000aec <HAL_DAC_MspInit+0xd4>)
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	4a05      	ldr	r2, [pc, #20]	@ (8000aec <HAL_DAC_MspInit+0xd4>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END DAC2_MspInit 1 */

  }

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	@ 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	50000c00 	.word	0x50000c00
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	200000a8 	.word	0x200000a8
 8000af0:	40020008 	.word	0x40020008

08000af4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a16      	ldr	r2, [pc, #88]	@ (8000b5c <HAL_TIM_Base_MspInit+0x68>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d10c      	bne.n	8000b20 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b06:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <HAL_TIM_Base_MspInit+0x6c>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0a:	4a15      	ldr	r2, [pc, #84]	@ (8000b60 <HAL_TIM_Base_MspInit+0x6c>)
 8000b0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b12:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <HAL_TIM_Base_MspInit+0x6c>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b1e:	e018      	b.n	8000b52 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b28:	d113      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <HAL_TIM_Base_MspInit+0x6c>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b60 <HAL_TIM_Base_MspInit+0x6c>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_TIM_Base_MspInit+0x6c>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	201c      	movs	r0, #28
 8000b48:	f001 fa03 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b4c:	201c      	movs	r0, #28
 8000b4e:	f001 fa1a 	bl	8001f86 <HAL_NVIC_EnableIRQ>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40012c00 	.word	0x40012c00
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a11      	ldr	r2, [pc, #68]	@ (8000bc8 <HAL_TIM_MspPostInit+0x64>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d11b      	bne.n	8000bbe <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <HAL_TIM_MspPostInit+0x68>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	4a10      	ldr	r2, [pc, #64]	@ (8000bcc <HAL_TIM_MspPostInit+0x68>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_TIM_MspPostInit+0x68>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <HAL_TIM_MspPostInit+0x6c>)
 8000bba:	f002 f835 	bl	8002c28 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40012c00 	.word	0x40012c00
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	48000800 	.word	0x48000800

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2a:	f000 f8a5 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <DMA1_Channel1_IRQHandler+0x10>)
 8000c3a:	f001 fea6 	bl	800298a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000a8 	.word	0x200000a8

08000c48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <TIM2_IRQHandler+0x10>)
 8000c4e:	f003 fbc5 	bl	80043dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000154 	.word	0x20000154

08000c5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c80:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c84:	f7ff ffea 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	@ (8000cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <LoopForever+0xe>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ccc <LoopForever+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cae:	f004 fd59 	bl	8005764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb2:	f7ff fb07 	bl	80002c4 <main>

08000cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb6:	e7fe      	b.n	8000cb6 <LoopForever>
  ldr   r0, =_estack
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cc4:	0800664c 	.word	0x0800664c
  ldr r2, =_sbss
 8000cc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ccc:	20000270 	.word	0x20000270

08000cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_2_IRQHandler>

08000cd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f001 f92d 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f000 f80e 	bl	8000d04 <HAL_InitTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	e001      	b.n	8000cf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf4:	f7ff fe14 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]

}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d10:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <HAL_InitTick+0x68>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d022      	beq.n	8000d5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d18:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_InitTick+0x6c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <HAL_InitTick+0x68>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 f938 	bl	8001fa2 <HAL_SYSTICK_Config>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10f      	bne.n	8000d58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b0f      	cmp	r3, #15
 8000d3c:	d809      	bhi.n	8000d52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295
 8000d46:	f001 f904 	bl	8001f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <HAL_InitTick+0x70>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e007      	b.n	8000d62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	73fb      	strb	r3, [r7, #15]
 8000d56:	e004      	b.n	8000d62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e001      	b.n	8000d62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000000 	.word	0x20000000
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_IncTick+0x1c>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <HAL_IncTick+0x20>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a03      	ldr	r2, [pc, #12]	@ (8000d94 <HAL_IncTick+0x1c>)
 8000d88:	6013      	str	r3, [r2, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	2000026c 	.word	0x2000026c
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	@ (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2000026c 	.word	0x2000026c

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff ffee 	bl	8000d9c <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dcc:	d004      	beq.n	8000dd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <HAL_Delay+0x40>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd8:	bf00      	nop
 8000dda:	f7ff ffdf 	bl	8000d9c <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d8f7      	bhi.n	8000dda <HAL_Delay+0x26>
  {
  }
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000008 	.word	0x20000008

08000df8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	609a      	str	r2, [r3, #8]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	609a      	str	r2, [r3, #8]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3360      	adds	r3, #96	@ 0x60
 8000e72:	461a      	mov	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <LL_ADC_SetOffset+0x44>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e98:	bf00      	nop
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	03fff000 	.word	0x03fff000

08000ea8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3360      	adds	r3, #96	@ 0x60
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3360      	adds	r3, #96	@ 0x60
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b087      	sub	sp, #28
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3360      	adds	r3, #96	@ 0x60
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f34:	bf00      	nop
 8000f36:	371c      	adds	r7, #28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3360      	adds	r3, #96	@ 0x60
 8000f50:	461a      	mov	r2, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f6a:	bf00      	nop
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	615a      	str	r2, [r3, #20]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3330      	adds	r3, #48	@ 0x30
 8000fac:	461a      	mov	r2, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	4413      	add	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	f003 031f 	and.w	r3, r3, #31
 8000fc6:	211f      	movs	r1, #31
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	0e9b      	lsrs	r3, r3, #26
 8000fd4:	f003 011f 	and.w	r1, r3, #31
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fe8:	bf00      	nop
 8000fea:	371c      	adds	r7, #28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3314      	adds	r3, #20
 8001004:	461a      	mov	r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	0e5b      	lsrs	r3, r3, #25
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	4413      	add	r3, r2
 8001012:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	0d1b      	lsrs	r3, r3, #20
 800101c:	f003 031f 	and.w	r3, r3, #31
 8001020:	2107      	movs	r1, #7
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	401a      	ands	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	0d1b      	lsrs	r3, r3, #20
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	431a      	orrs	r2, r3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800103e:	bf00      	nop
 8001040:	371c      	adds	r7, #28
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001064:	43db      	mvns	r3, r3
 8001066:	401a      	ands	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0318 	and.w	r3, r3, #24
 800106e:	4908      	ldr	r1, [pc, #32]	@ (8001090 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001070:	40d9      	lsrs	r1, r3
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	400b      	ands	r3, r1
 8001076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800107a:	431a      	orrs	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	0007ffff 	.word	0x0007ffff

08001094 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80010a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	6093      	str	r3, [r2, #8]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80010c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010cc:	d101      	bne.n	80010d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80010f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800111c:	d101      	bne.n	8001122 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <LL_ADC_IsEnabled+0x18>
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <LL_ADC_IsEnabled+0x1a>
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	2b04      	cmp	r3, #4
 8001168:	d101      	bne.n	800116e <LL_ADC_REG_IsConversionOngoing+0x18>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	2b08      	cmp	r3, #8
 800118e:	d101      	bne.n	8001194 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b089      	sub	sp, #36	@ 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e1a9      	b.n	8001512 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d109      	bne.n	80011e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fbcb 	bl	8000968 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff67 	bl	80010b8 <LL_ADC_IsDeepPowerDownEnabled>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff4d 	bl	8001094 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff82 	bl	8001108 <LL_ADC_IsInternalRegulatorEnabled>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d115      	bne.n	8001236 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff66 	bl	80010e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001214:	4b9c      	ldr	r3, [pc, #624]	@ (8001488 <HAL_ADC_Init+0x2e4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	099b      	lsrs	r3, r3, #6
 800121a:	4a9c      	ldr	r2, [pc, #624]	@ (800148c <HAL_ADC_Init+0x2e8>)
 800121c:	fba2 2303 	umull	r2, r3, r2, r3
 8001220:	099b      	lsrs	r3, r3, #6
 8001222:	3301      	adds	r3, #1
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001228:	e002      	b.n	8001230 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3b01      	subs	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f9      	bne.n	800122a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff64 	bl	8001108 <LL_ADC_IsInternalRegulatorEnabled>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10d      	bne.n	8001262 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800124a:	f043 0210 	orr.w	r2, r3, #16
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001256:	f043 0201 	orr.w	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff75 	bl	8001156 <LL_ADC_REG_IsConversionOngoing>
 800126c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	f040 8142 	bne.w	8001500 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 813e 	bne.w	8001500 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001288:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800128c:	f043 0202 	orr.w	r2, r3, #2
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff49 	bl	8001130 <LL_ADC_IsEnabled>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d141      	bne.n	8001328 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ac:	d004      	beq.n	80012b8 <HAL_ADC_Init+0x114>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a77      	ldr	r2, [pc, #476]	@ (8001490 <HAL_ADC_Init+0x2ec>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d10f      	bne.n	80012d8 <HAL_ADC_Init+0x134>
 80012b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80012bc:	f7ff ff38 	bl	8001130 <LL_ADC_IsEnabled>
 80012c0:	4604      	mov	r4, r0
 80012c2:	4873      	ldr	r0, [pc, #460]	@ (8001490 <HAL_ADC_Init+0x2ec>)
 80012c4:	f7ff ff34 	bl	8001130 <LL_ADC_IsEnabled>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4323      	orrs	r3, r4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	e012      	b.n	80012fe <HAL_ADC_Init+0x15a>
 80012d8:	486e      	ldr	r0, [pc, #440]	@ (8001494 <HAL_ADC_Init+0x2f0>)
 80012da:	f7ff ff29 	bl	8001130 <LL_ADC_IsEnabled>
 80012de:	4604      	mov	r4, r0
 80012e0:	486d      	ldr	r0, [pc, #436]	@ (8001498 <HAL_ADC_Init+0x2f4>)
 80012e2:	f7ff ff25 	bl	8001130 <LL_ADC_IsEnabled>
 80012e6:	4603      	mov	r3, r0
 80012e8:	431c      	orrs	r4, r3
 80012ea:	486c      	ldr	r0, [pc, #432]	@ (800149c <HAL_ADC_Init+0x2f8>)
 80012ec:	f7ff ff20 	bl	8001130 <LL_ADC_IsEnabled>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4323      	orrs	r3, r4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bf0c      	ite	eq
 80012f8:	2301      	moveq	r3, #1
 80012fa:	2300      	movne	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d012      	beq.n	8001328 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800130a:	d004      	beq.n	8001316 <HAL_ADC_Init+0x172>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a5f      	ldr	r2, [pc, #380]	@ (8001490 <HAL_ADC_Init+0x2ec>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_ADC_Init+0x176>
 8001316:	4a62      	ldr	r2, [pc, #392]	@ (80014a0 <HAL_ADC_Init+0x2fc>)
 8001318:	e000      	b.n	800131c <HAL_ADC_Init+0x178>
 800131a:	4a62      	ldr	r2, [pc, #392]	@ (80014a4 <HAL_ADC_Init+0x300>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4619      	mov	r1, r3
 8001322:	4610      	mov	r0, r2
 8001324:	f7ff fd68 	bl	8000df8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7f5b      	ldrb	r3, [r3, #29]
 800132c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001332:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001338:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800133e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001346:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001352:	2b01      	cmp	r3, #1
 8001354:	d106      	bne.n	8001364 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135a:	3b01      	subs	r3, #1
 800135c:	045b      	lsls	r3, r3, #17
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001370:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001378:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	4b48      	ldr	r3, [pc, #288]	@ (80014a8 <HAL_ADC_Init+0x304>)
 8001388:	4013      	ands	r3, r2
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	69b9      	ldr	r1, [r7, #24]
 8001390:	430b      	orrs	r3, r1
 8001392:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fee4 	bl	800117c <LL_ADC_INJ_IsConversionOngoing>
 80013b4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d17f      	bne.n	80014bc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d17c      	bne.n	80014bc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013c6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80013ce:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80013de:	f023 0302 	bic.w	r3, r3, #2
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	69b9      	ldr	r1, [r7, #24]
 80013e8:	430b      	orrs	r3, r1
 80013ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d017      	beq.n	8001424 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001402:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800140c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001410:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6911      	ldr	r1, [r2, #16]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	430b      	orrs	r3, r1
 800141e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001422:	e013      	b.n	800144c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001432:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001444:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001448:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001452:	2b01      	cmp	r3, #1
 8001454:	d12a      	bne.n	80014ac <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001460:	f023 0304 	bic.w	r3, r3, #4
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800146c:	4311      	orrs	r1, r2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001472:	4311      	orrs	r1, r2
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001478:	430a      	orrs	r2, r1
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0201 	orr.w	r2, r2, #1
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	e019      	b.n	80014bc <HAL_ADC_Init+0x318>
 8001488:	20000000 	.word	0x20000000
 800148c:	053e2d63 	.word	0x053e2d63
 8001490:	50000100 	.word	0x50000100
 8001494:	50000400 	.word	0x50000400
 8001498:	50000500 	.word	0x50000500
 800149c:	50000600 	.word	0x50000600
 80014a0:	50000300 	.word	0x50000300
 80014a4:	50000700 	.word	0x50000700
 80014a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	691a      	ldr	r2, [r3, #16]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d10c      	bne.n	80014de <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f023 010f 	bic.w	r1, r3, #15
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	1e5a      	subs	r2, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	631a      	str	r2, [r3, #48]	@ 0x30
 80014dc:	e007      	b.n	80014ee <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 020f 	bic.w	r2, r2, #15
 80014ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f2:	f023 0303 	bic.w	r3, r3, #3
 80014f6:	f043 0201 	orr.w	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014fe:	e007      	b.n	8001510 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001504:	f043 0210 	orr.w	r2, r3, #16
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001510:	7ffb      	ldrb	r3, [r7, #31]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	@ 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}
 800151a:	bf00      	nop

0800151c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b0b6      	sub	sp, #216	@ 0xd8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001536:	2b01      	cmp	r3, #1
 8001538:	d102      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x24>
 800153a:	2302      	movs	r3, #2
 800153c:	f000 bc13 	b.w	8001d66 <HAL_ADC_ConfigChannel+0x84a>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fe02 	bl	8001156 <LL_ADC_REG_IsConversionOngoing>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	f040 83f3 	bne.w	8001d40 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	6859      	ldr	r1, [r3, #4]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	f7ff fd18 	bl	8000f9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fdf0 	bl	8001156 <LL_ADC_REG_IsConversionOngoing>
 8001576:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fdfc 	bl	800117c <LL_ADC_INJ_IsConversionOngoing>
 8001584:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001588:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800158c:	2b00      	cmp	r3, #0
 800158e:	f040 81d9 	bne.w	8001944 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001592:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 81d4 	bne.w	8001944 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80015a4:	d10f      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff fd1f 	bl	8000ff4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fcd9 	bl	8000f76 <LL_ADC_SetSamplingTimeCommonConfig>
 80015c4:	e00e      	b.n	80015e4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	6819      	ldr	r1, [r3, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	461a      	mov	r2, r3
 80015d4:	f7ff fd0e 	bl	8000ff4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fcc9 	bl	8000f76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	08db      	lsrs	r3, r3, #3
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b04      	cmp	r3, #4
 8001604:	d022      	beq.n	800164c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6919      	ldr	r1, [r3, #16]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001616:	f7ff fc23 	bl	8000e60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	6919      	ldr	r1, [r3, #16]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	461a      	mov	r2, r3
 8001628:	f7ff fc6f 	bl	8000f0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001638:	2b01      	cmp	r3, #1
 800163a:	d102      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x126>
 800163c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001640:	e000      	b.n	8001644 <HAL_ADC_ConfigChannel+0x128>
 8001642:	2300      	movs	r3, #0
 8001644:	461a      	mov	r2, r3
 8001646:	f7ff fc7b 	bl	8000f40 <LL_ADC_SetOffsetSaturation>
 800164a:	e17b      	b.n	8001944 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fc28 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10a      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x15c>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fc1d 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	0e9b      	lsrs	r3, r3, #26
 8001672:	f003 021f 	and.w	r2, r3, #31
 8001676:	e01e      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x19a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fc12 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001696:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800169a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800169e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80016a6:	2320      	movs	r3, #32
 80016a8:	e004      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80016aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d105      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x1b2>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	0e9b      	lsrs	r3, r3, #26
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	e018      	b.n	8001700 <HAL_ADC_ConfigChannel+0x1e4>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80016e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80016ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80016f2:	2320      	movs	r3, #32
 80016f4:	e004      	b.n	8001700 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80016f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001700:	429a      	cmp	r2, r3
 8001702:	d106      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2200      	movs	r2, #0
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fbe1 	bl	8000ed4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2101      	movs	r1, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fbc5 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10a      	bne.n	800173e <HAL_ADC_ConfigChannel+0x222>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fbba 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	0e9b      	lsrs	r3, r3, #26
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	e01e      	b.n	800177c <HAL_ADC_ConfigChannel+0x260>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2101      	movs	r1, #1
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fbaf 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800175c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001760:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001764:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800176c:	2320      	movs	r3, #32
 800176e:	e004      	b.n	800177a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001770:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001784:	2b00      	cmp	r3, #0
 8001786:	d105      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x278>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0e9b      	lsrs	r3, r3, #26
 800178e:	f003 031f 	and.w	r3, r3, #31
 8001792:	e018      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x2aa>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80017a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80017b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80017b8:	2320      	movs	r3, #32
 80017ba:	e004      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80017bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80017c0:	fab3 f383 	clz	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d106      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	2101      	movs	r1, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fb7e 	bl	8000ed4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2102      	movs	r1, #2
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fb62 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10a      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x2e8>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2102      	movs	r1, #2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fb57 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	0e9b      	lsrs	r3, r3, #26
 80017fe:	f003 021f 	and.w	r2, r3, #31
 8001802:	e01e      	b.n	8001842 <HAL_ADC_ConfigChannel+0x326>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2102      	movs	r1, #2
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fb4c 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001822:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001826:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800182a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001832:	2320      	movs	r3, #32
 8001834:	e004      	b.n	8001840 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001836:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184a:	2b00      	cmp	r3, #0
 800184c:	d105      	bne.n	800185a <HAL_ADC_ConfigChannel+0x33e>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0e9b      	lsrs	r3, r3, #26
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	e016      	b.n	8001888 <HAL_ADC_ConfigChannel+0x36c>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001866:	fa93 f3a3 	rbit	r3, r3
 800186a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800186c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800186e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001872:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800187a:	2320      	movs	r3, #32
 800187c:	e004      	b.n	8001888 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800187e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001888:	429a      	cmp	r2, r3
 800188a:	d106      	bne.n	800189a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2200      	movs	r2, #0
 8001892:	2102      	movs	r1, #2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fb1d 	bl	8000ed4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2103      	movs	r1, #3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fb01 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10a      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x3aa>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2103      	movs	r1, #3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff faf6 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	0e9b      	lsrs	r3, r3, #26
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	e017      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x3da>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2103      	movs	r1, #3
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff faeb 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80018de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018e0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80018e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80018e8:	2320      	movs	r3, #32
 80018ea:	e003      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80018ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <HAL_ADC_ConfigChannel+0x3f2>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	0e9b      	lsrs	r3, r3, #26
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	e011      	b.n	8001932 <HAL_ADC_ConfigChannel+0x416>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800191c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800191e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001920:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001926:	2320      	movs	r3, #32
 8001928:	e003      	b.n	8001932 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800192a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001932:	429a      	cmp	r2, r3
 8001934:	d106      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	2103      	movs	r1, #3
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fac8 	bl	8000ed4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fbf1 	bl	8001130 <LL_ADC_IsEnabled>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 813d 	bne.w	8001bd0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	6819      	ldr	r1, [r3, #0]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	461a      	mov	r2, r3
 8001964:	f7ff fb72 	bl	800104c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4aa2      	ldr	r2, [pc, #648]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x6dc>)
 800196e:	4293      	cmp	r3, r2
 8001970:	f040 812e 	bne.w	8001bd0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10b      	bne.n	800199c <HAL_ADC_ConfigChannel+0x480>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0e9b      	lsrs	r3, r3, #26
 800198a:	3301      	adds	r3, #1
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	2b09      	cmp	r3, #9
 8001992:	bf94      	ite	ls
 8001994:	2301      	movls	r3, #1
 8001996:	2300      	movhi	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	e019      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x4b4>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019a4:	fa93 f3a3 	rbit	r3, r3
 80019a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80019aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019ac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80019ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80019b4:	2320      	movs	r3, #32
 80019b6:	e003      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80019b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019ba:	fab3 f383 	clz	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	3301      	adds	r3, #1
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	2b09      	cmp	r3, #9
 80019c8:	bf94      	ite	ls
 80019ca:	2301      	movls	r3, #1
 80019cc:	2300      	movhi	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d079      	beq.n	8001ac8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x4d4>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0e9b      	lsrs	r3, r3, #26
 80019e6:	3301      	adds	r3, #1
 80019e8:	069b      	lsls	r3, r3, #26
 80019ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019ee:	e015      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x500>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019f8:	fa93 f3a3 	rbit	r3, r3
 80019fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80019fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a00:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	e003      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	069b      	lsls	r3, r3, #26
 8001a18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d109      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x520>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0e9b      	lsrs	r3, r3, #26
 8001a2e:	3301      	adds	r3, #1
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	2101      	movs	r1, #1
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	e017      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x550>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001a54:	2320      	movs	r3, #32
 8001a56:	e003      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001a58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	3301      	adds	r3, #1
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	2101      	movs	r1, #1
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	ea42 0103 	orr.w	r1, r2, r3
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10a      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x576>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0e9b      	lsrs	r3, r3, #26
 8001a82:	3301      	adds	r3, #1
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	051b      	lsls	r3, r3, #20
 8001a90:	e018      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x5a8>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	e003      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	e07e      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d107      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x5c8>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	3301      	adds	r3, #1
 8001adc:	069b      	lsls	r3, r3, #26
 8001ade:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ae2:	e015      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x5f4>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001afc:	2320      	movs	r3, #32
 8001afe:	e003      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	069b      	lsls	r3, r3, #26
 8001b0c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x614>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0e9b      	lsrs	r3, r3, #26
 8001b22:	3301      	adds	r3, #1
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	2101      	movs	r1, #1
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	e017      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x644>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	61fb      	str	r3, [r7, #28]
  return result;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	e003      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	3301      	adds	r3, #1
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	ea42 0103 	orr.w	r1, r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10d      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x670>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0e9b      	lsrs	r3, r3, #26
 8001b76:	3301      	adds	r3, #1
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	3b1e      	subs	r3, #30
 8001b84:	051b      	lsls	r3, r3, #20
 8001b86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	e01b      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x6a8>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	fa93 f3a3 	rbit	r3, r3
 8001b98:	613b      	str	r3, [r7, #16]
  return result;
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	e003      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f003 021f 	and.w	r2, r3, #31
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b1e      	subs	r3, #30
 8001bbe:	051b      	lsls	r3, r3, #20
 8001bc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bc4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7ff fa12 	bl	8000ff4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_ADC_ConfigChannel+0x6e0>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80be 	beq.w	8001d5a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001be6:	d004      	beq.n	8001bf2 <HAL_ADC_ConfigChannel+0x6d6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <HAL_ADC_ConfigChannel+0x6e4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10a      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x6ec>
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <HAL_ADC_ConfigChannel+0x6e8>)
 8001bf4:	e009      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x6ee>
 8001bf6:	bf00      	nop
 8001bf8:	407f0000 	.word	0x407f0000
 8001bfc:	80080000 	.word	0x80080000
 8001c00:	50000100 	.word	0x50000100
 8001c04:	50000300 	.word	0x50000300
 8001c08:	4b59      	ldr	r3, [pc, #356]	@ (8001d70 <HAL_ADC_ConfigChannel+0x854>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f91a 	bl	8000e44 <LL_ADC_GetCommonPathInternalCh>
 8001c10:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a56      	ldr	r2, [pc, #344]	@ (8001d74 <HAL_ADC_ConfigChannel+0x858>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d004      	beq.n	8001c28 <HAL_ADC_ConfigChannel+0x70c>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a55      	ldr	r2, [pc, #340]	@ (8001d78 <HAL_ADC_ConfigChannel+0x85c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d13a      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d134      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c3c:	d005      	beq.n	8001c4a <HAL_ADC_ConfigChannel+0x72e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a4e      	ldr	r2, [pc, #312]	@ (8001d7c <HAL_ADC_ConfigChannel+0x860>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	f040 8085 	bne.w	8001d54 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c52:	d004      	beq.n	8001c5e <HAL_ADC_ConfigChannel+0x742>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a49      	ldr	r2, [pc, #292]	@ (8001d80 <HAL_ADC_ConfigChannel+0x864>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x746>
 8001c5e:	4a49      	ldr	r2, [pc, #292]	@ (8001d84 <HAL_ADC_ConfigChannel+0x868>)
 8001c60:	e000      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x748>
 8001c62:	4a43      	ldr	r2, [pc, #268]	@ (8001d70 <HAL_ADC_ConfigChannel+0x854>)
 8001c64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4610      	mov	r0, r2
 8001c70:	f7ff f8d5 	bl	8000e1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c74:	4b44      	ldr	r3, [pc, #272]	@ (8001d88 <HAL_ADC_ConfigChannel+0x86c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	099b      	lsrs	r3, r3, #6
 8001c7a:	4a44      	ldr	r2, [pc, #272]	@ (8001d8c <HAL_ADC_ConfigChannel+0x870>)
 8001c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c80:	099b      	lsrs	r3, r3, #6
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c8e:	e002      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f9      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c9c:	e05a      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a3b      	ldr	r2, [pc, #236]	@ (8001d90 <HAL_ADC_ConfigChannel+0x874>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d125      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d11f      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a31      	ldr	r2, [pc, #196]	@ (8001d80 <HAL_ADC_ConfigChannel+0x864>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d104      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x7ac>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a34      	ldr	r2, [pc, #208]	@ (8001d94 <HAL_ADC_ConfigChannel+0x878>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d047      	beq.n	8001d58 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cd0:	d004      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x7c0>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8001d80 <HAL_ADC_ConfigChannel+0x864>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x7c4>
 8001cdc:	4a29      	ldr	r2, [pc, #164]	@ (8001d84 <HAL_ADC_ConfigChannel+0x868>)
 8001cde:	e000      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x7c6>
 8001ce0:	4a23      	ldr	r2, [pc, #140]	@ (8001d70 <HAL_ADC_ConfigChannel+0x854>)
 8001ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cea:	4619      	mov	r1, r3
 8001cec:	4610      	mov	r0, r2
 8001cee:	f7ff f896 	bl	8000e1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cf2:	e031      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a27      	ldr	r2, [pc, #156]	@ (8001d98 <HAL_ADC_ConfigChannel+0x87c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d12d      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d127      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d80 <HAL_ADC_ConfigChannel+0x864>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d022      	beq.n	8001d5a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d1c:	d004      	beq.n	8001d28 <HAL_ADC_ConfigChannel+0x80c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <HAL_ADC_ConfigChannel+0x864>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x810>
 8001d28:	4a16      	ldr	r2, [pc, #88]	@ (8001d84 <HAL_ADC_ConfigChannel+0x868>)
 8001d2a:	e000      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x812>
 8001d2c:	4a10      	ldr	r2, [pc, #64]	@ (8001d70 <HAL_ADC_ConfigChannel+0x854>)
 8001d2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d36:	4619      	mov	r1, r3
 8001d38:	4610      	mov	r0, r2
 8001d3a:	f7ff f870 	bl	8000e1e <LL_ADC_SetCommonPathInternalCh>
 8001d3e:	e00c      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d44:	f043 0220 	orr.w	r2, r3, #32
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001d52:	e002      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d54:	bf00      	nop
 8001d56:	e000      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001d62:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	37d8      	adds	r7, #216	@ 0xd8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	50000700 	.word	0x50000700
 8001d74:	c3210000 	.word	0xc3210000
 8001d78:	90c00010 	.word	0x90c00010
 8001d7c:	50000600 	.word	0x50000600
 8001d80:	50000100 	.word	0x50000100
 8001d84:	50000300 	.word	0x50000300
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	053e2d63 	.word	0x053e2d63
 8001d90:	c7520000 	.word	0xc7520000
 8001d94:	50000500 	.word	0x50000500
 8001d98:	cb840000 	.word	0xcb840000

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	@ (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	@ (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	@ (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	@ 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	@ 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f7ff ff8e 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	@ (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff29 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f60:	f7ff ff40 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff ff90 	bl	8001e90 <NVIC_EncodePriority>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff5f 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff33 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffa4 	bl	8001ef8 <SysTick_Config>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e014      	b.n	8001ff6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	791b      	ldrb	r3, [r3, #4]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7fe fd1b 	bl	8000a18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e056      	b.n	80020c2 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	795b      	ldrb	r3, [r3, #5]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_DAC_Start+0x20>
 800201c:	2302      	movs	r3, #2
 800201e:	e050      	b.n	80020c2 <HAL_DAC_Start+0xc2>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2202      	movs	r2, #2
 800202a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6819      	ldr	r1, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2201      	movs	r2, #1
 800203a:	409a      	lsls	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002044:	4b22      	ldr	r3, [pc, #136]	@ (80020d0 <HAL_DAC_Start+0xd0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	4a22      	ldr	r2, [pc, #136]	@ (80020d4 <HAL_DAC_Start+0xd4>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	3301      	adds	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8002056:	e002      	b.n	800205e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3b01      	subs	r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f9      	bne.n	8002058 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10f      	bne.n	800208a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002074:	2b02      	cmp	r3, #2
 8002076:	d11d      	bne.n	80020b4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	e014      	b.n	80020b4 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2102      	movs	r1, #2
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d107      	bne.n	80020b4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0202 	orr.w	r2, r2, #2
 80020b2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000000 	.word	0x20000000
 80020d4:	053e2d63 	.word	0x053e2d63

080020d8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0b2      	b.n	8002256 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	795b      	ldrb	r3, [r3, #5]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_DAC_Start_DMA+0x24>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0ac      	b.n	8002256 <HAL_DAC_Start_DMA+0x17e>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2202      	movs	r2, #2
 8002106:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d129      	bne.n	8002162 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4a53      	ldr	r2, [pc, #332]	@ (8002260 <HAL_DAC_Start_DMA+0x188>)
 8002114:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4a52      	ldr	r2, [pc, #328]	@ (8002264 <HAL_DAC_Start_DMA+0x18c>)
 800211c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	4a51      	ldr	r2, [pc, #324]	@ (8002268 <HAL_DAC_Start_DMA+0x190>)
 8002124:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002134:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_DAC_Start_DMA+0x6c>
 800213c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213e:	2b04      	cmp	r3, #4
 8002140:	d005      	beq.n	800214e <HAL_DAC_Start_DMA+0x76>
 8002142:	e009      	b.n	8002158 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3308      	adds	r3, #8
 800214a:	61bb      	str	r3, [r7, #24]
        break;
 800214c:	e033      	b.n	80021b6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	330c      	adds	r3, #12
 8002154:	61bb      	str	r3, [r7, #24]
        break;
 8002156:	e02e      	b.n	80021b6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3310      	adds	r3, #16
 800215e:	61bb      	str	r3, [r7, #24]
        break;
 8002160:	e029      	b.n	80021b6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	4a41      	ldr	r2, [pc, #260]	@ (800226c <HAL_DAC_Start_DMA+0x194>)
 8002168:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	4a40      	ldr	r2, [pc, #256]	@ (8002270 <HAL_DAC_Start_DMA+0x198>)
 8002170:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	4a3f      	ldr	r2, [pc, #252]	@ (8002274 <HAL_DAC_Start_DMA+0x19c>)
 8002178:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002188:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800218a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_DAC_Start_DMA+0xc0>
 8002190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002192:	2b04      	cmp	r3, #4
 8002194:	d005      	beq.n	80021a2 <HAL_DAC_Start_DMA+0xca>
 8002196:	e009      	b.n	80021ac <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3314      	adds	r3, #20
 800219e:	61bb      	str	r3, [r7, #24]
        break;
 80021a0:	e009      	b.n	80021b6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3318      	adds	r3, #24
 80021a8:	61bb      	str	r3, [r7, #24]
        break;
 80021aa:	e004      	b.n	80021b6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	331c      	adds	r3, #28
 80021b2:	61bb      	str	r3, [r7, #24]
        break;
 80021b4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d111      	bne.n	80021e0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6898      	ldr	r0, [r3, #8]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	f000 fb5d 	bl	8002894 <HAL_DMA_Start_IT>
 80021da:	4603      	mov	r3, r0
 80021dc:	77fb      	strb	r3, [r7, #31]
 80021de:	e010      	b.n	8002202 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80021ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68d8      	ldr	r0, [r3, #12]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	f000 fb4b 	bl	8002894 <HAL_DMA_Start_IT>
 80021fe:	4603      	mov	r3, r0
 8002200:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002208:	7ffb      	ldrb	r3, [r7, #31]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d11c      	bne.n	8002248 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6819      	ldr	r1, [r3, #0]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2201      	movs	r2, #1
 800221c:	409a      	lsls	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002226:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <HAL_DAC_Start_DMA+0x1a0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	099b      	lsrs	r3, r3, #6
 800222c:	4a13      	ldr	r2, [pc, #76]	@ (800227c <HAL_DAC_Start_DMA+0x1a4>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	3301      	adds	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002238:	e002      	b.n	8002240 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3b01      	subs	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f9      	bne.n	800223a <HAL_DAC_Start_DMA+0x162>
 8002246:	e005      	b.n	8002254 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002254:	7ffb      	ldrb	r3, [r7, #31]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	08002631 	.word	0x08002631
 8002264:	08002653 	.word	0x08002653
 8002268:	0800266f 	.word	0x0800266f
 800226c:	080026d9 	.word	0x080026d9
 8002270:	080026fb 	.word	0x080026fb
 8002274:	08002717 	.word	0x08002717
 8002278:	20000000 	.word	0x20000000
 800227c:	053e2d63 	.word	0x053e2d63

08002280 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	@ 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_DAC_ConfigChannel+0x1c>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e1a1      	b.n	8002620 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	795b      	ldrb	r3, [r3, #5]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_DAC_ConfigChannel+0x32>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e198      	b.n	8002620 <HAL_DAC_ConfigChannel+0x364>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2202      	movs	r2, #2
 80022f8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d17a      	bne.n	80023f8 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002302:	f7fe fd4b 	bl	8000d9c <HAL_GetTick>
 8002306:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d13d      	bne.n	800238a <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800230e:	e018      	b.n	8002342 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002310:	f7fe fd44 	bl	8000d9c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d911      	bls.n	8002342 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002324:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f043 0208 	orr.w	r2, r3, #8
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2203      	movs	r2, #3
 800233c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e16e      	b.n	8002620 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1df      	bne.n	8002310 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002358:	641a      	str	r2, [r3, #64]	@ 0x40
 800235a:	e020      	b.n	800239e <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800235c:	f7fe fd1e 	bl	8000d9c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d90f      	bls.n	800238a <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002370:	2b00      	cmp	r3, #0
 8002372:	da0a      	bge.n	800238a <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f043 0208 	orr.w	r2, r3, #8
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2203      	movs	r2, #3
 8002384:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e14a      	b.n	8002620 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002390:	2b00      	cmp	r3, #0
 8002392:	dbe3      	blt.n	800235c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800239c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	ea02 0103 	and.w	r1, r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	21ff      	movs	r1, #255	@ 0xff
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	ea02 0103 	and.w	r1, r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	409a      	lsls	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d11d      	bne.n	800243c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	221f      	movs	r2, #31
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002418:	4013      	ands	r3, r2
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002430:	4313      	orrs	r3, r2
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2207      	movs	r2, #7
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002454:	4013      	ands	r3, r2
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d102      	bne.n	8002466 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
 8002464:	e00f      	b.n	8002486 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d102      	bne.n	8002474 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800246e:	2301      	movs	r3, #1
 8002470:	623b      	str	r3, [r7, #32]
 8002472:	e008      	b.n	8002486 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800247c:	2301      	movs	r3, #1
 800247e:	623b      	str	r3, [r7, #32]
 8002480:	e001      	b.n	8002486 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	6a3a      	ldr	r2, [r7, #32]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a8:	4013      	ands	r3, r2
 80024aa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	791b      	ldrb	r3, [r3, #4]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d102      	bne.n	80024ba <HAL_DAC_ConfigChannel+0x1fe>
 80024b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024b8:	e000      	b.n	80024bc <HAL_DAC_ConfigChannel+0x200>
 80024ba:	2300      	movs	r3, #0
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d4:	4013      	ands	r3, r2
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	795b      	ldrb	r3, [r3, #5]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d102      	bne.n	80024e6 <HAL_DAC_ConfigChannel+0x22a>
 80024e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024e4:	e000      	b.n	80024e8 <HAL_DAC_ConfigChannel+0x22c>
 80024e6:	2300      	movs	r3, #0
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d114      	bne.n	8002528 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80024fe:	f001 fa91 	bl	8003a24 <HAL_RCC_GetHCLKFreq>
 8002502:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4a48      	ldr	r2, [pc, #288]	@ (8002628 <HAL_DAC_ConfigChannel+0x36c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d904      	bls.n	8002516 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
 8002514:	e00f      	b.n	8002536 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4a44      	ldr	r2, [pc, #272]	@ (800262c <HAL_DAC_ConfigChannel+0x370>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d90a      	bls.n	8002534 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800251e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002524:	627b      	str	r3, [r7, #36]	@ 0x24
 8002526:	e006      	b.n	8002536 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800252e:	4313      	orrs	r3, r2
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
 8002532:	e000      	b.n	8002536 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002534:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002544:	4313      	orrs	r3, r2
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6819      	ldr	r1, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43da      	mvns	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	400a      	ands	r2, r1
 800256c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002588:	4013      	ands	r3, r2
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a0:	4313      	orrs	r3, r2
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025aa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	22c0      	movs	r2, #192	@ 0xc0
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	400a      	ands	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	ea02 0103 	and.w	r1, r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	409a      	lsls	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800261e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3728      	adds	r7, #40	@ 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	09896800 	.word	0x09896800
 800262c:	04c4b400 	.word	0x04c4b400

08002630 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7ff fe1e 	bl	8002280 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	711a      	strb	r2, [r3, #4]
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f7ff fe17 	bl	8002294 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b084      	sub	sp, #16
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f043 0204 	orr.w	r2, r3, #4
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7ff fe0d 	bl	80022a8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	711a      	strb	r2, [r3, #4]
}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7ff ffd8 	bl	800269c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	711a      	strb	r2, [r3, #4]
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002706:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7ff ffd1 	bl	80026b0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002722:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f043 0204 	orr.w	r2, r3, #4
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff ffc7 	bl	80026c4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	711a      	strb	r2, [r3, #4]
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e08d      	b.n	8002872 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	4b47      	ldr	r3, [pc, #284]	@ (800287c <HAL_DMA_Init+0x138>)
 800275e:	429a      	cmp	r2, r3
 8002760:	d80f      	bhi.n	8002782 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	4b45      	ldr	r3, [pc, #276]	@ (8002880 <HAL_DMA_Init+0x13c>)
 800276a:	4413      	add	r3, r2
 800276c:	4a45      	ldr	r2, [pc, #276]	@ (8002884 <HAL_DMA_Init+0x140>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	009a      	lsls	r2, r3, #2
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a42      	ldr	r2, [pc, #264]	@ (8002888 <HAL_DMA_Init+0x144>)
 800277e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002780:	e00e      	b.n	80027a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	4b40      	ldr	r3, [pc, #256]	@ (800288c <HAL_DMA_Init+0x148>)
 800278a:	4413      	add	r3, r2
 800278c:	4a3d      	ldr	r2, [pc, #244]	@ (8002884 <HAL_DMA_Init+0x140>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	009a      	lsls	r2, r3, #2
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a3c      	ldr	r2, [pc, #240]	@ (8002890 <HAL_DMA_Init+0x14c>)
 800279e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80027b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f9b6 	bl	8002b64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002800:	d102      	bne.n	8002808 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800281c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d010      	beq.n	8002848 <HAL_DMA_Init+0x104>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b04      	cmp	r3, #4
 800282c:	d80c      	bhi.n	8002848 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f9d6 	bl	8002be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	e008      	b.n	800285a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40020407 	.word	0x40020407
 8002880:	bffdfff8 	.word	0xbffdfff8
 8002884:	cccccccd 	.word	0xcccccccd
 8002888:	40020000 	.word	0x40020000
 800288c:	bffdfbf8 	.word	0xbffdfbf8
 8002890:	40020400 	.word	0x40020400

08002894 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_DMA_Start_IT+0x20>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e066      	b.n	8002982 <HAL_DMA_Start_IT+0xee>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d155      	bne.n	8002974 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0201 	bic.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f8fb 	bl	8002ae8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 020e 	orr.w	r2, r2, #14
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e00f      	b.n	800292c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0204 	bic.w	r2, r2, #4
 800291a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 020a 	orr.w	r2, r2, #10
 800292a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002944:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002948:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002960:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	e005      	b.n	8002980 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800297c:	2302      	movs	r3, #2
 800297e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002980:	7dfb      	ldrb	r3, [r7, #23]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2204      	movs	r2, #4
 80029ac:	409a      	lsls	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d026      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x7a>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d021      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d107      	bne.n	80029de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0204 	bic.w	r2, r2, #4
 80029dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	f003 021f 	and.w	r2, r3, #31
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	2104      	movs	r1, #4
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d071      	beq.n	8002ade <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a02:	e06c      	b.n	8002ade <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d02e      	beq.n	8002a76 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d029      	beq.n	8002a76 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 020a 	bic.w	r2, r2, #10
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4c:	f003 021f 	and.w	r2, r3, #31
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	2102      	movs	r1, #2
 8002a56:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d038      	beq.n	8002ade <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a74:	e033      	b.n	8002ade <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2208      	movs	r2, #8
 8002a80:	409a      	lsls	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d02a      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d025      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 020e 	bic.w	r2, r2, #14
 8002aa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
}
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002afe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d004      	beq.n	8002b12 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b10:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	f003 021f 	and.w	r2, r3, #31
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	2101      	movs	r1, #1
 8002b20:	fa01 f202 	lsl.w	r2, r1, r2
 8002b24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d108      	bne.n	8002b48 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b46:	e007      	b.n	8002b58 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	60da      	str	r2, [r3, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b16      	ldr	r3, [pc, #88]	@ (8002bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d802      	bhi.n	8002b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002b78:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e001      	b.n	8002b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002b7e:	4b15      	ldr	r3, [pc, #84]	@ (8002bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002b80:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	3b08      	subs	r3, #8
 8002b8e:	4a12      	ldr	r2, [pc, #72]	@ (8002bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002b90:	fba2 2303 	umull	r2, r3, r2, r3
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	009a      	lsls	r2, r3, #2
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a0b      	ldr	r2, [pc, #44]	@ (8002bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002bae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40020407 	.word	0x40020407
 8002bd0:	40020800 	.word	0x40020800
 8002bd4:	40020820 	.word	0x40020820
 8002bd8:	cccccccd 	.word	0xcccccccd
 8002bdc:	40020880 	.word	0x40020880

08002be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c02:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	1000823f 	.word	0x1000823f
 8002c24:	40020940 	.word	0x40020940

08002c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c36:	e15a      	b.n	8002eee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	4013      	ands	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 814c 	beq.w	8002ee8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d005      	beq.n	8002c68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d130      	bne.n	8002cca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f003 0201 	and.w	r2, r3, #1
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d017      	beq.n	8002d06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d123      	bne.n	8002d5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	08da      	lsrs	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3208      	adds	r2, #8
 8002d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	220f      	movs	r2, #15
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	08da      	lsrs	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3208      	adds	r2, #8
 8002d54:	6939      	ldr	r1, [r7, #16]
 8002d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0203 	and.w	r2, r3, #3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80a6 	beq.w	8002ee8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8002f0c <HAL_GPIO_Init+0x2e4>)
 8002d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f0c <HAL_GPIO_Init+0x2e4>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002da8:	4b58      	ldr	r3, [pc, #352]	@ (8002f0c <HAL_GPIO_Init+0x2e4>)
 8002daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db4:	4a56      	ldr	r2, [pc, #344]	@ (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	089b      	lsrs	r3, r3, #2
 8002dba:	3302      	adds	r3, #2
 8002dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	220f      	movs	r2, #15
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dde:	d01f      	beq.n	8002e20 <HAL_GPIO_Init+0x1f8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a4c      	ldr	r2, [pc, #304]	@ (8002f14 <HAL_GPIO_Init+0x2ec>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d019      	beq.n	8002e1c <HAL_GPIO_Init+0x1f4>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a4b      	ldr	r2, [pc, #300]	@ (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <HAL_GPIO_Init+0x1f0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a4a      	ldr	r2, [pc, #296]	@ (8002f1c <HAL_GPIO_Init+0x2f4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00d      	beq.n	8002e14 <HAL_GPIO_Init+0x1ec>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a49      	ldr	r2, [pc, #292]	@ (8002f20 <HAL_GPIO_Init+0x2f8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d007      	beq.n	8002e10 <HAL_GPIO_Init+0x1e8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a48      	ldr	r2, [pc, #288]	@ (8002f24 <HAL_GPIO_Init+0x2fc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d101      	bne.n	8002e0c <HAL_GPIO_Init+0x1e4>
 8002e08:	2305      	movs	r3, #5
 8002e0a:	e00a      	b.n	8002e22 <HAL_GPIO_Init+0x1fa>
 8002e0c:	2306      	movs	r3, #6
 8002e0e:	e008      	b.n	8002e22 <HAL_GPIO_Init+0x1fa>
 8002e10:	2304      	movs	r3, #4
 8002e12:	e006      	b.n	8002e22 <HAL_GPIO_Init+0x1fa>
 8002e14:	2303      	movs	r3, #3
 8002e16:	e004      	b.n	8002e22 <HAL_GPIO_Init+0x1fa>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e002      	b.n	8002e22 <HAL_GPIO_Init+0x1fa>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <HAL_GPIO_Init+0x1fa>
 8002e20:	2300      	movs	r3, #0
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	f002 0203 	and.w	r2, r2, #3
 8002e28:	0092      	lsls	r2, r2, #2
 8002e2a:	4093      	lsls	r3, r2
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e32:	4937      	ldr	r1, [pc, #220]	@ (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	3302      	adds	r3, #2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e40:	4b39      	ldr	r3, [pc, #228]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e64:	4a30      	ldr	r2, [pc, #192]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e8e:	4a26      	ldr	r2, [pc, #152]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e94:	4b24      	ldr	r3, [pc, #144]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ee2:	4a11      	ldr	r2, [pc, #68]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	3301      	adds	r3, #1
 8002eec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f47f ae9d 	bne.w	8002c38 <HAL_GPIO_Init+0x10>
  }
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40010000 	.word	0x40010000
 8002f14:	48000400 	.word	0x48000400
 8002f18:	48000800 	.word	0x48000800
 8002f1c:	48000c00 	.word	0x48000c00
 8002f20:	48001000 	.word	0x48001000
 8002f24:	48001400 	.word	0x48001400
 8002f28:	40010400 	.word	0x40010400

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d141      	bne.n	8002fee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f6a:	4b4b      	ldr	r3, [pc, #300]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f76:	d131      	bne.n	8002fdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f78:	4b47      	ldr	r3, [pc, #284]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f7e:	4a46      	ldr	r2, [pc, #280]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f88:	4b43      	ldr	r3, [pc, #268]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f90:	4a41      	ldr	r2, [pc, #260]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f98:	4b40      	ldr	r3, [pc, #256]	@ (800309c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2232      	movs	r2, #50	@ 0x32
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
 8002fa2:	4a3f      	ldr	r2, [pc, #252]	@ (80030a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	0c9b      	lsrs	r3, r3, #18
 8002faa:	3301      	adds	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fae:	e002      	b.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fb6:	4b38      	ldr	r3, [pc, #224]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc2:	d102      	bne.n	8002fca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f2      	bne.n	8002fb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fca:	4b33      	ldr	r3, [pc, #204]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd6:	d158      	bne.n	800308a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e057      	b.n	800308c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fe8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fec:	e04d      	b.n	800308a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ff4:	d141      	bne.n	800307a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ff6:	4b28      	ldr	r3, [pc, #160]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003002:	d131      	bne.n	8003068 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003004:	4b24      	ldr	r3, [pc, #144]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800300a:	4a23      	ldr	r2, [pc, #140]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003010:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003014:	4b20      	ldr	r3, [pc, #128]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800301c:	4a1e      	ldr	r2, [pc, #120]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003022:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003024:	4b1d      	ldr	r3, [pc, #116]	@ (800309c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2232      	movs	r2, #50	@ 0x32
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	4a1c      	ldr	r2, [pc, #112]	@ (80030a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	0c9b      	lsrs	r3, r3, #18
 8003036:	3301      	adds	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800303a:	e002      	b.n	8003042 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3b01      	subs	r3, #1
 8003040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800304a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304e:	d102      	bne.n	8003056 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f2      	bne.n	800303c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003056:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003062:	d112      	bne.n	800308a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e011      	b.n	800308c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003068:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800306e:	4a0a      	ldr	r2, [pc, #40]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003074:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003078:	e007      	b.n	800308a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800307a:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003082:	4a05      	ldr	r2, [pc, #20]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003084:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003088:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40007000 	.word	0x40007000
 800309c:	20000000 	.word	0x20000000
 80030a0:	431bde83 	.word	0x431bde83

080030a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80030a8:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a04      	ldr	r2, [pc, #16]	@ (80030c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b2:	6093      	str	r3, [r2, #8]
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40007000 	.word	0x40007000

080030c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e2fe      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d075      	beq.n	80031ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030e2:	4b97      	ldr	r3, [pc, #604]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030ec:	4b94      	ldr	r3, [pc, #592]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2b0c      	cmp	r3, #12
 80030fa:	d102      	bne.n	8003102 <HAL_RCC_OscConfig+0x3e>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d002      	beq.n	8003108 <HAL_RCC_OscConfig+0x44>
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d10b      	bne.n	8003120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	4b8d      	ldr	r3, [pc, #564]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d05b      	beq.n	80031cc <HAL_RCC_OscConfig+0x108>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d157      	bne.n	80031cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e2d9      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003128:	d106      	bne.n	8003138 <HAL_RCC_OscConfig+0x74>
 800312a:	4b85      	ldr	r3, [pc, #532]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a84      	ldr	r2, [pc, #528]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e01d      	b.n	8003174 <HAL_RCC_OscConfig+0xb0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0x98>
 8003142:	4b7f      	ldr	r3, [pc, #508]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a7e      	ldr	r2, [pc, #504]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4b7c      	ldr	r3, [pc, #496]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a7b      	ldr	r2, [pc, #492]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e00b      	b.n	8003174 <HAL_RCC_OscConfig+0xb0>
 800315c:	4b78      	ldr	r3, [pc, #480]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a77      	ldr	r2, [pc, #476]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	4b75      	ldr	r3, [pc, #468]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a74      	ldr	r2, [pc, #464]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 800316e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fd fe0e 	bl	8000d9c <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003184:	f7fd fe0a 	bl	8000d9c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	@ 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e29e      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003196:	4b6a      	ldr	r3, [pc, #424]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0xc0>
 80031a2:	e014      	b.n	80031ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fd fdfa 	bl	8000d9c <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ac:	f7fd fdf6 	bl	8000d9c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	@ 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e28a      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031be:	4b60      	ldr	r3, [pc, #384]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0xe8>
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d075      	beq.n	80032c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031da:	4b59      	ldr	r3, [pc, #356]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031e4:	4b56      	ldr	r3, [pc, #344]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b0c      	cmp	r3, #12
 80031f2:	d102      	bne.n	80031fa <HAL_RCC_OscConfig+0x136>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d002      	beq.n	8003200 <HAL_RCC_OscConfig+0x13c>
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d11f      	bne.n	8003240 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003200:	4b4f      	ldr	r3, [pc, #316]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_RCC_OscConfig+0x154>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e25d      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003218:	4b49      	ldr	r3, [pc, #292]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	4946      	ldr	r1, [pc, #280]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800322c:	4b45      	ldr	r3, [pc, #276]	@ (8003344 <HAL_RCC_OscConfig+0x280>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd fd67 	bl	8000d04 <HAL_InitTick>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d043      	beq.n	80032c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e249      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d023      	beq.n	8003290 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003248:	4b3d      	ldr	r3, [pc, #244]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a3c      	ldr	r2, [pc, #240]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 800324e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fd fda2 	bl	8000d9c <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800325c:	f7fd fd9e 	bl	8000d9c <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e232      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800326e:	4b34      	ldr	r3, [pc, #208]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327a:	4b31      	ldr	r3, [pc, #196]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	061b      	lsls	r3, r3, #24
 8003288:	492d      	ldr	r1, [pc, #180]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
 800328e:	e01a      	b.n	80032c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003290:	4b2b      	ldr	r3, [pc, #172]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a2a      	ldr	r2, [pc, #168]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003296:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800329a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fd fd7e 	bl	8000d9c <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a4:	f7fd fd7a 	bl	8000d9c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e20e      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032b6:	4b22      	ldr	r3, [pc, #136]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x1e0>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d041      	beq.n	8003356 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d01c      	beq.n	8003314 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032da:	4b19      	ldr	r3, [pc, #100]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 80032dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032e0:	4a17      	ldr	r2, [pc, #92]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ea:	f7fd fd57 	bl	8000d9c <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f2:	f7fd fd53 	bl	8000d9c <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e1e7      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003304:	4b0e      	ldr	r3, [pc, #56]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0ef      	beq.n	80032f2 <HAL_RCC_OscConfig+0x22e>
 8003312:	e020      	b.n	8003356 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003314:	4b0a      	ldr	r3, [pc, #40]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800331a:	4a09      	ldr	r2, [pc, #36]	@ (8003340 <HAL_RCC_OscConfig+0x27c>)
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fd fd3a 	bl	8000d9c <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800332a:	e00d      	b.n	8003348 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332c:	f7fd fd36 	bl	8000d9c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d906      	bls.n	8003348 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1ca      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000
 8003344:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003348:	4b8c      	ldr	r3, [pc, #560]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 800334a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1ea      	bne.n	800332c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80a6 	beq.w	80034b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003364:	2300      	movs	r3, #0
 8003366:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003368:	4b84      	ldr	r3, [pc, #528]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 800336a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_OscConfig+0x2b4>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_RCC_OscConfig+0x2b6>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	4b7f      	ldr	r3, [pc, #508]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 8003380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003382:	4a7e      	ldr	r2, [pc, #504]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 8003384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003388:	6593      	str	r3, [r2, #88]	@ 0x58
 800338a:	4b7c      	ldr	r3, [pc, #496]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 800338c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003396:	2301      	movs	r3, #1
 8003398:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339a:	4b79      	ldr	r3, [pc, #484]	@ (8003580 <HAL_RCC_OscConfig+0x4bc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d118      	bne.n	80033d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033a6:	4b76      	ldr	r3, [pc, #472]	@ (8003580 <HAL_RCC_OscConfig+0x4bc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a75      	ldr	r2, [pc, #468]	@ (8003580 <HAL_RCC_OscConfig+0x4bc>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b2:	f7fd fcf3 	bl	8000d9c <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ba:	f7fd fcef 	bl	8000d9c <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e183      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003580 <HAL_RCC_OscConfig+0x4bc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d108      	bne.n	80033f2 <HAL_RCC_OscConfig+0x32e>
 80033e0:	4b66      	ldr	r3, [pc, #408]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e6:	4a65      	ldr	r2, [pc, #404]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033f0:	e024      	b.n	800343c <HAL_RCC_OscConfig+0x378>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b05      	cmp	r3, #5
 80033f8:	d110      	bne.n	800341c <HAL_RCC_OscConfig+0x358>
 80033fa:	4b60      	ldr	r3, [pc, #384]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003400:	4a5e      	ldr	r2, [pc, #376]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800340a:	4b5c      	ldr	r3, [pc, #368]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003410:	4a5a      	ldr	r2, [pc, #360]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800341a:	e00f      	b.n	800343c <HAL_RCC_OscConfig+0x378>
 800341c:	4b57      	ldr	r3, [pc, #348]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003422:	4a56      	ldr	r2, [pc, #344]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800342c:	4b53      	ldr	r3, [pc, #332]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003432:	4a52      	ldr	r2, [pc, #328]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 8003434:	f023 0304 	bic.w	r3, r3, #4
 8003438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d016      	beq.n	8003472 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fd fcaa 	bl	8000d9c <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800344a:	e00a      	b.n	8003462 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344c:	f7fd fca6 	bl	8000d9c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e138      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003462:	4b46      	ldr	r3, [pc, #280]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ed      	beq.n	800344c <HAL_RCC_OscConfig+0x388>
 8003470:	e015      	b.n	800349e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003472:	f7fd fc93 	bl	8000d9c <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fd fc8f 	bl	8000d9c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e121      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003490:	4b3a      	ldr	r3, [pc, #232]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1ed      	bne.n	800347a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800349e:	7ffb      	ldrb	r3, [r7, #31]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d105      	bne.n	80034b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a4:	4b35      	ldr	r3, [pc, #212]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a8:	4a34      	ldr	r2, [pc, #208]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 80034aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d03c      	beq.n	8003536 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01c      	beq.n	80034fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034c4:	4b2d      	ldr	r3, [pc, #180]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 80034c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034ca:	4a2c      	ldr	r2, [pc, #176]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7fd fc62 	bl	8000d9c <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034dc:	f7fd fc5e 	bl	8000d9c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0f2      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ee:	4b23      	ldr	r3, [pc, #140]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 80034f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ef      	beq.n	80034dc <HAL_RCC_OscConfig+0x418>
 80034fc:	e01b      	b.n	8003536 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034fe:	4b1f      	ldr	r3, [pc, #124]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 8003500:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003504:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350e:	f7fd fc45 	bl	8000d9c <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003516:	f7fd fc41 	bl	8000d9c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e0d5      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003528:	4b14      	ldr	r3, [pc, #80]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 800352a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ef      	bne.n	8003516 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80c9 	beq.w	80036d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003540:	4b0e      	ldr	r3, [pc, #56]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b0c      	cmp	r3, #12
 800354a:	f000 8083 	beq.w	8003654 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d15e      	bne.n	8003614 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	4b09      	ldr	r3, [pc, #36]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a08      	ldr	r2, [pc, #32]	@ (800357c <HAL_RCC_OscConfig+0x4b8>)
 800355c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7fd fc1b 	bl	8000d9c <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003568:	e00c      	b.n	8003584 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356a:	f7fd fc17 	bl	8000d9c <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d905      	bls.n	8003584 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0ab      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
 800357c:	40021000 	.word	0x40021000
 8003580:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003584:	4b55      	ldr	r3, [pc, #340]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ec      	bne.n	800356a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003590:	4b52      	ldr	r3, [pc, #328]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	4b52      	ldr	r3, [pc, #328]	@ (80036e0 <HAL_RCC_OscConfig+0x61c>)
 8003596:	4013      	ands	r3, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6a11      	ldr	r1, [r2, #32]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035a0:	3a01      	subs	r2, #1
 80035a2:	0112      	lsls	r2, r2, #4
 80035a4:	4311      	orrs	r1, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80035aa:	0212      	lsls	r2, r2, #8
 80035ac:	4311      	orrs	r1, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035b2:	0852      	lsrs	r2, r2, #1
 80035b4:	3a01      	subs	r2, #1
 80035b6:	0552      	lsls	r2, r2, #21
 80035b8:	4311      	orrs	r1, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035be:	0852      	lsrs	r2, r2, #1
 80035c0:	3a01      	subs	r2, #1
 80035c2:	0652      	lsls	r2, r2, #25
 80035c4:	4311      	orrs	r1, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035ca:	06d2      	lsls	r2, r2, #27
 80035cc:	430a      	orrs	r2, r1
 80035ce:	4943      	ldr	r1, [pc, #268]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d4:	4b41      	ldr	r3, [pc, #260]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a40      	ldr	r2, [pc, #256]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 80035da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035e0:	4b3e      	ldr	r3, [pc, #248]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a3d      	ldr	r2, [pc, #244]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 80035e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fd fbd6 	bl	8000d9c <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f4:	f7fd fbd2 	bl	8000d9c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e066      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003606:	4b35      	ldr	r3, [pc, #212]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x530>
 8003612:	e05e      	b.n	80036d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003614:	4b31      	ldr	r3, [pc, #196]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a30      	ldr	r2, [pc, #192]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 800361a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800361e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fd fbbc 	bl	8000d9c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003628:	f7fd fbb8 	bl	8000d9c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e04c      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800363a:	4b28      	ldr	r3, [pc, #160]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003646:	4b25      	ldr	r3, [pc, #148]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	4924      	ldr	r1, [pc, #144]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 800364c:	4b25      	ldr	r3, [pc, #148]	@ (80036e4 <HAL_RCC_OscConfig+0x620>)
 800364e:	4013      	ands	r3, r2
 8003650:	60cb      	str	r3, [r1, #12]
 8003652:	e03e      	b.n	80036d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e039      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003660:	4b1e      	ldr	r3, [pc, #120]	@ (80036dc <HAL_RCC_OscConfig+0x618>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f003 0203 	and.w	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	429a      	cmp	r2, r3
 8003672:	d12c      	bne.n	80036ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	3b01      	subs	r3, #1
 8003680:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d123      	bne.n	80036ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003690:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d11b      	bne.n	80036ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d113      	bne.n	80036ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	3b01      	subs	r3, #1
 80036b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d109      	bne.n	80036ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	3b01      	subs	r3, #1
 80036c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3720      	adds	r7, #32
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40021000 	.word	0x40021000
 80036e0:	019f800c 	.word	0x019f800c
 80036e4:	feeefffc 	.word	0xfeeefffc

080036e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e11e      	b.n	800393e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b91      	ldr	r3, [pc, #580]	@ (8003948 <HAL_RCC_ClockConfig+0x260>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d910      	bls.n	8003730 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b8e      	ldr	r3, [pc, #568]	@ (8003948 <HAL_RCC_ClockConfig+0x260>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 020f 	bic.w	r2, r3, #15
 8003716:	498c      	ldr	r1, [pc, #560]	@ (8003948 <HAL_RCC_ClockConfig+0x260>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b8a      	ldr	r3, [pc, #552]	@ (8003948 <HAL_RCC_ClockConfig+0x260>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e106      	b.n	800393e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d073      	beq.n	8003824 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b03      	cmp	r3, #3
 8003742:	d129      	bne.n	8003798 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003744:	4b81      	ldr	r3, [pc, #516]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0f4      	b.n	800393e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003754:	f000 f972 	bl	8003a3c <RCC_GetSysClockFreqFromPLLSource>
 8003758:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4a7c      	ldr	r2, [pc, #496]	@ (8003950 <HAL_RCC_ClockConfig+0x268>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d93f      	bls.n	80037e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003762:	4b7a      	ldr	r3, [pc, #488]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003776:	2b00      	cmp	r3, #0
 8003778:	d033      	beq.n	80037e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800377e:	2b00      	cmp	r3, #0
 8003780:	d12f      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003782:	4b72      	ldr	r3, [pc, #456]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800378a:	4a70      	ldr	r2, [pc, #448]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 800378c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003790:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003792:	2380      	movs	r3, #128	@ 0x80
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e024      	b.n	80037e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d107      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a0:	4b6a      	ldr	r3, [pc, #424]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0c6      	b.n	800393e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b0:	4b66      	ldr	r3, [pc, #408]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0be      	b.n	800393e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037c0:	f000 f8ce 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4a61      	ldr	r2, [pc, #388]	@ (8003950 <HAL_RCC_ClockConfig+0x268>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d909      	bls.n	80037e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037ce:	4b5f      	ldr	r3, [pc, #380]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037d6:	4a5d      	ldr	r2, [pc, #372]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 80037d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037de:	2380      	movs	r3, #128	@ 0x80
 80037e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037e2:	4b5a      	ldr	r3, [pc, #360]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f023 0203 	bic.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4957      	ldr	r1, [pc, #348]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f4:	f7fd fad2 	bl	8000d9c <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fc:	f7fd face 	bl	8000d9c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e095      	b.n	800393e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	4b4e      	ldr	r3, [pc, #312]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 020c 	and.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	429a      	cmp	r2, r3
 8003822:	d1eb      	bne.n	80037fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d023      	beq.n	8003878 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800383c:	4b43      	ldr	r3, [pc, #268]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4a42      	ldr	r2, [pc, #264]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 8003842:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003846:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003854:	4b3d      	ldr	r3, [pc, #244]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800385c:	4a3b      	ldr	r2, [pc, #236]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 800385e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003862:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003864:	4b39      	ldr	r3, [pc, #228]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4936      	ldr	r1, [pc, #216]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
 8003876:	e008      	b.n	800388a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2b80      	cmp	r3, #128	@ 0x80
 800387c:	d105      	bne.n	800388a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800387e:	4b33      	ldr	r3, [pc, #204]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4a32      	ldr	r2, [pc, #200]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 8003884:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003888:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800388a:	4b2f      	ldr	r3, [pc, #188]	@ (8003948 <HAL_RCC_ClockConfig+0x260>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d21d      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003898:	4b2b      	ldr	r3, [pc, #172]	@ (8003948 <HAL_RCC_ClockConfig+0x260>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 020f 	bic.w	r2, r3, #15
 80038a0:	4929      	ldr	r1, [pc, #164]	@ (8003948 <HAL_RCC_ClockConfig+0x260>)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038a8:	f7fd fa78 	bl	8000d9c <HAL_GetTick>
 80038ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b0:	f7fd fa74 	bl	8000d9c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e03b      	b.n	800393e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b20      	ldr	r3, [pc, #128]	@ (8003948 <HAL_RCC_ClockConfig+0x260>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d1ed      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e0:	4b1a      	ldr	r3, [pc, #104]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4917      	ldr	r1, [pc, #92]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fe:	4b13      	ldr	r3, [pc, #76]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	490f      	ldr	r1, [pc, #60]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003912:	f000 f825 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 8003916:	4602      	mov	r2, r0
 8003918:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <HAL_RCC_ClockConfig+0x264>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	490c      	ldr	r1, [pc, #48]	@ (8003954 <HAL_RCC_ClockConfig+0x26c>)
 8003924:	5ccb      	ldrb	r3, [r1, r3]
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a0a      	ldr	r2, [pc, #40]	@ (8003958 <HAL_RCC_ClockConfig+0x270>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003932:	4b0a      	ldr	r3, [pc, #40]	@ (800395c <HAL_RCC_ClockConfig+0x274>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd f9e4 	bl	8000d04 <HAL_InitTick>
 800393c:	4603      	mov	r3, r0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40022000 	.word	0x40022000
 800394c:	40021000 	.word	0x40021000
 8003950:	04c4b400 	.word	0x04c4b400
 8003954:	08006264 	.word	0x08006264
 8003958:	20000000 	.word	0x20000000
 800395c:	20000004 	.word	0x20000004

08003960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003966:	4b2c      	ldr	r3, [pc, #176]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b04      	cmp	r3, #4
 8003970:	d102      	bne.n	8003978 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003972:	4b2a      	ldr	r3, [pc, #168]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	e047      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003978:	4b27      	ldr	r3, [pc, #156]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b08      	cmp	r3, #8
 8003982:	d102      	bne.n	800398a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003984:	4b26      	ldr	r3, [pc, #152]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	e03e      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800398a:	4b23      	ldr	r3, [pc, #140]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b0c      	cmp	r3, #12
 8003994:	d136      	bne.n	8003a04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003996:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	3301      	adds	r3, #1
 80039ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d10c      	bne.n	80039ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	4a16      	ldr	r2, [pc, #88]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039be:	68d2      	ldr	r2, [r2, #12]
 80039c0:	0a12      	lsrs	r2, r2, #8
 80039c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	617b      	str	r3, [r7, #20]
      break;
 80039cc:	e00c      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039ce:	4a13      	ldr	r2, [pc, #76]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	4a10      	ldr	r2, [pc, #64]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d8:	68d2      	ldr	r2, [r2, #12]
 80039da:	0a12      	lsrs	r2, r2, #8
 80039dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039e0:	fb02 f303 	mul.w	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]
      break;
 80039e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	0e5b      	lsrs	r3, r3, #25
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	3301      	adds	r3, #1
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	e001      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a08:	693b      	ldr	r3, [r7, #16]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	00f42400 	.word	0x00f42400
 8003a20:	007a1200 	.word	0x007a1200

08003a24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a28:	4b03      	ldr	r3, [pc, #12]	@ (8003a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	20000000 	.word	0x20000000

08003a3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a42:	4b1e      	ldr	r3, [pc, #120]	@ (8003abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	3301      	adds	r3, #1
 8003a58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d10c      	bne.n	8003a7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a60:	4a17      	ldr	r2, [pc, #92]	@ (8003ac0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	4a14      	ldr	r2, [pc, #80]	@ (8003abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a6a:	68d2      	ldr	r2, [r2, #12]
 8003a6c:	0a12      	lsrs	r2, r2, #8
 8003a6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	617b      	str	r3, [r7, #20]
    break;
 8003a78:	e00c      	b.n	8003a94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a7a:	4a12      	ldr	r2, [pc, #72]	@ (8003ac4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	4a0e      	ldr	r2, [pc, #56]	@ (8003abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a84:	68d2      	ldr	r2, [r2, #12]
 8003a86:	0a12      	lsrs	r2, r2, #8
 8003a88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a8c:	fb02 f303 	mul.w	r3, r2, r3
 8003a90:	617b      	str	r3, [r7, #20]
    break;
 8003a92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a94:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	0e5b      	lsrs	r3, r3, #25
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003aae:	687b      	ldr	r3, [r7, #4]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	007a1200 	.word	0x007a1200
 8003ac4:	00f42400 	.word	0x00f42400

08003ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8098 	beq.w	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aea:	4b43      	ldr	r3, [pc, #268]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10d      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af6:	4b40      	ldr	r3, [pc, #256]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afa:	4a3f      	ldr	r2, [pc, #252]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b02:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b12:	4b3a      	ldr	r3, [pc, #232]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a39      	ldr	r2, [pc, #228]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b1e:	f7fd f93d 	bl	8000d9c <HAL_GetTick>
 8003b22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b24:	e009      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b26:	f7fd f939 	bl	8000d9c <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d902      	bls.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	74fb      	strb	r3, [r7, #19]
        break;
 8003b38:	e005      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b3a:	4b30      	ldr	r3, [pc, #192]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0ef      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b46:	7cfb      	ldrb	r3, [r7, #19]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d159      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01e      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d019      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b68:	4b23      	ldr	r3, [pc, #140]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b74:	4b20      	ldr	r3, [pc, #128]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b84:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b94:	4a18      	ldr	r2, [pc, #96]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba6:	f7fd f8f9 	bl	8000d9c <HAL_GetTick>
 8003baa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bac:	e00b      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fd f8f5 	bl	8000d9c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d902      	bls.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	74fb      	strb	r3, [r7, #19]
            break;
 8003bc4:	e006      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0ec      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10b      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bda:	4b07      	ldr	r3, [pc, #28]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be8:	4903      	ldr	r1, [pc, #12]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003bf0:	e008      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	74bb      	strb	r3, [r7, #18]
 8003bf6:	e005      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c04:	7c7b      	ldrb	r3, [r7, #17]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d105      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0a:	4ba7      	ldr	r3, [pc, #668]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0e:	4aa6      	ldr	r2, [pc, #664]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c22:	4ba1      	ldr	r3, [pc, #644]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c28:	f023 0203 	bic.w	r2, r3, #3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	499d      	ldr	r1, [pc, #628]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c44:	4b98      	ldr	r3, [pc, #608]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4a:	f023 020c 	bic.w	r2, r3, #12
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	4995      	ldr	r1, [pc, #596]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c66:	4b90      	ldr	r3, [pc, #576]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	498c      	ldr	r1, [pc, #560]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c88:	4b87      	ldr	r3, [pc, #540]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	4984      	ldr	r1, [pc, #528]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003caa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	497b      	ldr	r1, [pc, #492]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ccc:	4b76      	ldr	r3, [pc, #472]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	4973      	ldr	r1, [pc, #460]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cee:	4b6e      	ldr	r3, [pc, #440]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	496a      	ldr	r1, [pc, #424]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d10:	4b65      	ldr	r3, [pc, #404]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	4962      	ldr	r1, [pc, #392]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d32:	4b5d      	ldr	r3, [pc, #372]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	4959      	ldr	r1, [pc, #356]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d54:	4b54      	ldr	r3, [pc, #336]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d5a:	f023 0203 	bic.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d62:	4951      	ldr	r1, [pc, #324]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d76:	4b4c      	ldr	r3, [pc, #304]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d84:	4948      	ldr	r1, [pc, #288]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d015      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d98:	4b43      	ldr	r3, [pc, #268]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	4940      	ldr	r1, [pc, #256]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003db6:	d105      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4a3a      	ldr	r2, [pc, #232]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dc2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d015      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dd0:	4b35      	ldr	r3, [pc, #212]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dde:	4932      	ldr	r1, [pc, #200]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dee:	d105      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003df0:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dfa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d015      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e08:	4b27      	ldr	r3, [pc, #156]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e16:	4924      	ldr	r1, [pc, #144]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e26:	d105      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e28:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d015      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e40:	4b19      	ldr	r3, [pc, #100]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4e:	4916      	ldr	r1, [pc, #88]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e5e:	d105      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e60:	4b11      	ldr	r3, [pc, #68]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4a10      	ldr	r2, [pc, #64]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d019      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	4908      	ldr	r1, [pc, #32]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e96:	d109      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e98:	4b03      	ldr	r3, [pc, #12]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a02      	ldr	r2, [pc, #8]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ea2:	60d3      	str	r3, [r2, #12]
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d015      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003eb8:	4b29      	ldr	r3, [pc, #164]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	4926      	ldr	r1, [pc, #152]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ed6:	d105      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ed8:	4b21      	ldr	r3, [pc, #132]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4a20      	ldr	r2, [pc, #128]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d015      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efe:	4918      	ldr	r1, [pc, #96]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0e:	d105      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f10:	4b13      	ldr	r3, [pc, #76]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4a12      	ldr	r2, [pc, #72]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f1a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d015      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f28:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f36:	490a      	ldr	r1, [pc, #40]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f46:	d105      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f48:	4b05      	ldr	r3, [pc, #20]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4a04      	ldr	r2, [pc, #16]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f54:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e049      	b.n	800400a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fc fdb2 	bl	8000af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f000 fdc6 	bl	8004b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b01      	cmp	r3, #1
 8004026:	d001      	beq.n	800402c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e04c      	b.n	80040c6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a26      	ldr	r2, [pc, #152]	@ (80040d4 <HAL_TIM_Base_Start+0xc0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d022      	beq.n	8004084 <HAL_TIM_Base_Start+0x70>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004046:	d01d      	beq.n	8004084 <HAL_TIM_Base_Start+0x70>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a22      	ldr	r2, [pc, #136]	@ (80040d8 <HAL_TIM_Base_Start+0xc4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d018      	beq.n	8004084 <HAL_TIM_Base_Start+0x70>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a21      	ldr	r2, [pc, #132]	@ (80040dc <HAL_TIM_Base_Start+0xc8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d013      	beq.n	8004084 <HAL_TIM_Base_Start+0x70>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1f      	ldr	r2, [pc, #124]	@ (80040e0 <HAL_TIM_Base_Start+0xcc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00e      	beq.n	8004084 <HAL_TIM_Base_Start+0x70>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1e      	ldr	r2, [pc, #120]	@ (80040e4 <HAL_TIM_Base_Start+0xd0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d009      	beq.n	8004084 <HAL_TIM_Base_Start+0x70>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1c      	ldr	r2, [pc, #112]	@ (80040e8 <HAL_TIM_Base_Start+0xd4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_TIM_Base_Start+0x70>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1b      	ldr	r2, [pc, #108]	@ (80040ec <HAL_TIM_Base_Start+0xd8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d115      	bne.n	80040b0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	4b19      	ldr	r3, [pc, #100]	@ (80040f0 <HAL_TIM_Base_Start+0xdc>)
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b06      	cmp	r3, #6
 8004094:	d015      	beq.n	80040c2 <HAL_TIM_Base_Start+0xae>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800409c:	d011      	beq.n	80040c2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ae:	e008      	b.n	80040c2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e000      	b.n	80040c4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800
 80040e0:	40000c00 	.word	0x40000c00
 80040e4:	40013400 	.word	0x40013400
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40015000 	.word	0x40015000
 80040f0:	00010007 	.word	0x00010007

080040f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e049      	b.n	800419a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f841 	bl	80041a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f000 fcfe 	bl	8004b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <HAL_TIM_PWM_Start+0x24>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	bf14      	ite	ne
 80041d4:	2301      	movne	r3, #1
 80041d6:	2300      	moveq	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	e03c      	b.n	8004256 <HAL_TIM_PWM_Start+0x9e>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d109      	bne.n	80041f6 <HAL_TIM_PWM_Start+0x3e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e02f      	b.n	8004256 <HAL_TIM_PWM_Start+0x9e>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d109      	bne.n	8004210 <HAL_TIM_PWM_Start+0x58>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e022      	b.n	8004256 <HAL_TIM_PWM_Start+0x9e>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d109      	bne.n	800422a <HAL_TIM_PWM_Start+0x72>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	bf14      	ite	ne
 8004222:	2301      	movne	r3, #1
 8004224:	2300      	moveq	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	e015      	b.n	8004256 <HAL_TIM_PWM_Start+0x9e>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b10      	cmp	r3, #16
 800422e:	d109      	bne.n	8004244 <HAL_TIM_PWM_Start+0x8c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e008      	b.n	8004256 <HAL_TIM_PWM_Start+0x9e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e0a6      	b.n	80043ac <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <HAL_TIM_PWM_Start+0xb6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800426c:	e023      	b.n	80042b6 <HAL_TIM_PWM_Start+0xfe>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d104      	bne.n	800427e <HAL_TIM_PWM_Start+0xc6>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800427c:	e01b      	b.n	80042b6 <HAL_TIM_PWM_Start+0xfe>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d104      	bne.n	800428e <HAL_TIM_PWM_Start+0xd6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800428c:	e013      	b.n	80042b6 <HAL_TIM_PWM_Start+0xfe>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b0c      	cmp	r3, #12
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Start+0xe6>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800429c:	e00b      	b.n	80042b6 <HAL_TIM_PWM_Start+0xfe>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start+0xf6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ac:	e003      	b.n	80042b6 <HAL_TIM_PWM_Start+0xfe>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2201      	movs	r2, #1
 80042bc:	6839      	ldr	r1, [r7, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 f8b2 	bl	8005428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a3a      	ldr	r2, [pc, #232]	@ (80043b4 <HAL_TIM_PWM_Start+0x1fc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d018      	beq.n	8004300 <HAL_TIM_PWM_Start+0x148>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a39      	ldr	r2, [pc, #228]	@ (80043b8 <HAL_TIM_PWM_Start+0x200>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d013      	beq.n	8004300 <HAL_TIM_PWM_Start+0x148>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a37      	ldr	r2, [pc, #220]	@ (80043bc <HAL_TIM_PWM_Start+0x204>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00e      	beq.n	8004300 <HAL_TIM_PWM_Start+0x148>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a36      	ldr	r2, [pc, #216]	@ (80043c0 <HAL_TIM_PWM_Start+0x208>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d009      	beq.n	8004300 <HAL_TIM_PWM_Start+0x148>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a34      	ldr	r2, [pc, #208]	@ (80043c4 <HAL_TIM_PWM_Start+0x20c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <HAL_TIM_PWM_Start+0x148>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a33      	ldr	r2, [pc, #204]	@ (80043c8 <HAL_TIM_PWM_Start+0x210>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d101      	bne.n	8004304 <HAL_TIM_PWM_Start+0x14c>
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <HAL_TIM_PWM_Start+0x14e>
 8004304:	2300      	movs	r3, #0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a25      	ldr	r2, [pc, #148]	@ (80043b4 <HAL_TIM_PWM_Start+0x1fc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d022      	beq.n	800436a <HAL_TIM_PWM_Start+0x1b2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800432c:	d01d      	beq.n	800436a <HAL_TIM_PWM_Start+0x1b2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a26      	ldr	r2, [pc, #152]	@ (80043cc <HAL_TIM_PWM_Start+0x214>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d018      	beq.n	800436a <HAL_TIM_PWM_Start+0x1b2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a24      	ldr	r2, [pc, #144]	@ (80043d0 <HAL_TIM_PWM_Start+0x218>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_TIM_PWM_Start+0x1b2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a23      	ldr	r2, [pc, #140]	@ (80043d4 <HAL_TIM_PWM_Start+0x21c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00e      	beq.n	800436a <HAL_TIM_PWM_Start+0x1b2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a19      	ldr	r2, [pc, #100]	@ (80043b8 <HAL_TIM_PWM_Start+0x200>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d009      	beq.n	800436a <HAL_TIM_PWM_Start+0x1b2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a18      	ldr	r2, [pc, #96]	@ (80043bc <HAL_TIM_PWM_Start+0x204>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d004      	beq.n	800436a <HAL_TIM_PWM_Start+0x1b2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a18      	ldr	r2, [pc, #96]	@ (80043c8 <HAL_TIM_PWM_Start+0x210>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d115      	bne.n	8004396 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	4b19      	ldr	r3, [pc, #100]	@ (80043d8 <HAL_TIM_PWM_Start+0x220>)
 8004372:	4013      	ands	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b06      	cmp	r3, #6
 800437a:	d015      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x1f0>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004382:	d011      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004394:	e008      	b.n	80043a8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	e000      	b.n	80043aa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40013400 	.word	0x40013400
 80043bc:	40014000 	.word	0x40014000
 80043c0:	40014400 	.word	0x40014400
 80043c4:	40014800 	.word	0x40014800
 80043c8:	40015000 	.word	0x40015000
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800
 80043d4:	40000c00 	.word	0x40000c00
 80043d8:	00010007 	.word	0x00010007

080043dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d020      	beq.n	8004440 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01b      	beq.n	8004440 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0202 	mvn.w	r2, #2
 8004410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fb66 	bl	8004af8 <HAL_TIM_IC_CaptureCallback>
 800442c:	e005      	b.n	800443a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fb58 	bl	8004ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fb69 	bl	8004b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	d020      	beq.n	800448c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01b      	beq.n	800448c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0204 	mvn.w	r2, #4
 800445c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fb40 	bl	8004af8 <HAL_TIM_IC_CaptureCallback>
 8004478:	e005      	b.n	8004486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fb32 	bl	8004ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fb43 	bl	8004b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d020      	beq.n	80044d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01b      	beq.n	80044d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0208 	mvn.w	r2, #8
 80044a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2204      	movs	r2, #4
 80044ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fb1a 	bl	8004af8 <HAL_TIM_IC_CaptureCallback>
 80044c4:	e005      	b.n	80044d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fb0c 	bl	8004ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fb1d 	bl	8004b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d020      	beq.n	8004524 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0210 	mvn.w	r2, #16
 80044f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2208      	movs	r2, #8
 80044fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 faf4 	bl	8004af8 <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fae6 	bl	8004ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 faf7 	bl	8004b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00c      	beq.n	8004548 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0201 	mvn.w	r2, #1
 8004540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fac4 	bl	8004ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00c      	beq.n	8004576 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800456e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f001 f8b3 	bl	80056dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00c      	beq.n	800459a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f001 f8ab 	bl	80056f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00c      	beq.n	80045be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fab1 	bl	8004b20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00c      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f06f 0220 	mvn.w	r2, #32
 80045da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 f873 	bl	80056c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00c      	beq.n	8004606 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80045fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f001 f87f 	bl	8005704 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00c      	beq.n	800462a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f001 f877 	bl	8005718 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00c      	beq.n	800464e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f001 f86f 	bl	800572c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00c      	beq.n	8004672 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800466a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f001 f867 	bl	8005740 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004672:	bf00      	nop
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004696:	2302      	movs	r3, #2
 8004698:	e0ff      	b.n	800489a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b14      	cmp	r3, #20
 80046a6:	f200 80f0 	bhi.w	800488a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046aa:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	08004705 	.word	0x08004705
 80046b4:	0800488b 	.word	0x0800488b
 80046b8:	0800488b 	.word	0x0800488b
 80046bc:	0800488b 	.word	0x0800488b
 80046c0:	08004745 	.word	0x08004745
 80046c4:	0800488b 	.word	0x0800488b
 80046c8:	0800488b 	.word	0x0800488b
 80046cc:	0800488b 	.word	0x0800488b
 80046d0:	08004787 	.word	0x08004787
 80046d4:	0800488b 	.word	0x0800488b
 80046d8:	0800488b 	.word	0x0800488b
 80046dc:	0800488b 	.word	0x0800488b
 80046e0:	080047c7 	.word	0x080047c7
 80046e4:	0800488b 	.word	0x0800488b
 80046e8:	0800488b 	.word	0x0800488b
 80046ec:	0800488b 	.word	0x0800488b
 80046f0:	08004809 	.word	0x08004809
 80046f4:	0800488b 	.word	0x0800488b
 80046f8:	0800488b 	.word	0x0800488b
 80046fc:	0800488b 	.word	0x0800488b
 8004700:	08004849 	.word	0x08004849
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fac6 	bl	8004c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0208 	orr.w	r2, r2, #8
 800471e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0204 	bic.w	r2, r2, #4
 800472e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6999      	ldr	r1, [r3, #24]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	619a      	str	r2, [r3, #24]
      break;
 8004742:	e0a5      	b.n	8004890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fb40 	bl	8004dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800475e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800476e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6999      	ldr	r1, [r3, #24]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	021a      	lsls	r2, r3, #8
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	619a      	str	r2, [r3, #24]
      break;
 8004784:	e084      	b.n	8004890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fbb3 	bl	8004ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0208 	orr.w	r2, r2, #8
 80047a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0204 	bic.w	r2, r2, #4
 80047b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69d9      	ldr	r1, [r3, #28]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	61da      	str	r2, [r3, #28]
      break;
 80047c4:	e064      	b.n	8004890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fc25 	bl	800501c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69d9      	ldr	r1, [r3, #28]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	021a      	lsls	r2, r3, #8
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	61da      	str	r2, [r3, #28]
      break;
 8004806:	e043      	b.n	8004890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fc98 	bl	8005144 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0208 	orr.w	r2, r2, #8
 8004822:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0204 	bic.w	r2, r2, #4
 8004832:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004846:	e023      	b.n	8004890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fce2 	bl	8005218 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004862:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004872:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	021a      	lsls	r2, r3, #8
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004888:	e002      	b.n	8004890 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
      break;
 800488e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004898:	7dfb      	ldrb	r3, [r7, #23]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop

080048a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_TIM_ConfigClockSource+0x1c>
 80048bc:	2302      	movs	r3, #2
 80048be:	e0f6      	b.n	8004aae <HAL_TIM_ConfigClockSource+0x20a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80048de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a6f      	ldr	r2, [pc, #444]	@ (8004ab8 <HAL_TIM_ConfigClockSource+0x214>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	f000 80c1 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1de>
 8004900:	4a6d      	ldr	r2, [pc, #436]	@ (8004ab8 <HAL_TIM_ConfigClockSource+0x214>)
 8004902:	4293      	cmp	r3, r2
 8004904:	f200 80c6 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 8004908:	4a6c      	ldr	r2, [pc, #432]	@ (8004abc <HAL_TIM_ConfigClockSource+0x218>)
 800490a:	4293      	cmp	r3, r2
 800490c:	f000 80b9 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1de>
 8004910:	4a6a      	ldr	r2, [pc, #424]	@ (8004abc <HAL_TIM_ConfigClockSource+0x218>)
 8004912:	4293      	cmp	r3, r2
 8004914:	f200 80be 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 8004918:	4a69      	ldr	r2, [pc, #420]	@ (8004ac0 <HAL_TIM_ConfigClockSource+0x21c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	f000 80b1 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1de>
 8004920:	4a67      	ldr	r2, [pc, #412]	@ (8004ac0 <HAL_TIM_ConfigClockSource+0x21c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	f200 80b6 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 8004928:	4a66      	ldr	r2, [pc, #408]	@ (8004ac4 <HAL_TIM_ConfigClockSource+0x220>)
 800492a:	4293      	cmp	r3, r2
 800492c:	f000 80a9 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1de>
 8004930:	4a64      	ldr	r2, [pc, #400]	@ (8004ac4 <HAL_TIM_ConfigClockSource+0x220>)
 8004932:	4293      	cmp	r3, r2
 8004934:	f200 80ae 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 8004938:	4a63      	ldr	r2, [pc, #396]	@ (8004ac8 <HAL_TIM_ConfigClockSource+0x224>)
 800493a:	4293      	cmp	r3, r2
 800493c:	f000 80a1 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1de>
 8004940:	4a61      	ldr	r2, [pc, #388]	@ (8004ac8 <HAL_TIM_ConfigClockSource+0x224>)
 8004942:	4293      	cmp	r3, r2
 8004944:	f200 80a6 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 8004948:	4a60      	ldr	r2, [pc, #384]	@ (8004acc <HAL_TIM_ConfigClockSource+0x228>)
 800494a:	4293      	cmp	r3, r2
 800494c:	f000 8099 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1de>
 8004950:	4a5e      	ldr	r2, [pc, #376]	@ (8004acc <HAL_TIM_ConfigClockSource+0x228>)
 8004952:	4293      	cmp	r3, r2
 8004954:	f200 809e 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 8004958:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800495c:	f000 8091 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1de>
 8004960:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004964:	f200 8096 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 8004968:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800496c:	f000 8089 	beq.w	8004a82 <HAL_TIM_ConfigClockSource+0x1de>
 8004970:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004974:	f200 808e 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 8004978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800497c:	d03e      	beq.n	80049fc <HAL_TIM_ConfigClockSource+0x158>
 800497e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004982:	f200 8087 	bhi.w	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 8004986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498a:	f000 8086 	beq.w	8004a9a <HAL_TIM_ConfigClockSource+0x1f6>
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004992:	d87f      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 8004994:	2b70      	cmp	r3, #112	@ 0x70
 8004996:	d01a      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0x12a>
 8004998:	2b70      	cmp	r3, #112	@ 0x70
 800499a:	d87b      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 800499c:	2b60      	cmp	r3, #96	@ 0x60
 800499e:	d050      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0x19e>
 80049a0:	2b60      	cmp	r3, #96	@ 0x60
 80049a2:	d877      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 80049a4:	2b50      	cmp	r3, #80	@ 0x50
 80049a6:	d03c      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x17e>
 80049a8:	2b50      	cmp	r3, #80	@ 0x50
 80049aa:	d873      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 80049ac:	2b40      	cmp	r3, #64	@ 0x40
 80049ae:	d058      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x1be>
 80049b0:	2b40      	cmp	r3, #64	@ 0x40
 80049b2:	d86f      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 80049b4:	2b30      	cmp	r3, #48	@ 0x30
 80049b6:	d064      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x1de>
 80049b8:	2b30      	cmp	r3, #48	@ 0x30
 80049ba:	d86b      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d060      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x1de>
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d867      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d05c      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x1de>
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d05a      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x1de>
 80049cc:	e062      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049de:	f000 fd03 	bl	80053e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	609a      	str	r2, [r3, #8]
      break;
 80049fa:	e04f      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a0c:	f000 fcec 	bl	80053e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a1e:	609a      	str	r2, [r3, #8]
      break;
 8004a20:	e03c      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f000 fc5e 	bl	80052f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2150      	movs	r1, #80	@ 0x50
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fcb7 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8004a40:	e02c      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f000 fc7d 	bl	800534e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2160      	movs	r1, #96	@ 0x60
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fca7 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8004a60:	e01c      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f000 fc3e 	bl	80052f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2140      	movs	r1, #64	@ 0x40
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fc97 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8004a80:	e00c      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f000 fc8e 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8004a92:	e003      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
      break;
 8004a98:	e000      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004a9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	00100070 	.word	0x00100070
 8004abc:	00100060 	.word	0x00100060
 8004ac0:	00100050 	.word	0x00100050
 8004ac4:	00100040 	.word	0x00100040
 8004ac8:	00100030 	.word	0x00100030
 8004acc:	00100020 	.word	0x00100020

08004ad0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a4c      	ldr	r2, [pc, #304]	@ (8004c78 <TIM_Base_SetConfig+0x144>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d017      	beq.n	8004b7c <TIM_Base_SetConfig+0x48>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b52:	d013      	beq.n	8004b7c <TIM_Base_SetConfig+0x48>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a49      	ldr	r2, [pc, #292]	@ (8004c7c <TIM_Base_SetConfig+0x148>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00f      	beq.n	8004b7c <TIM_Base_SetConfig+0x48>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a48      	ldr	r2, [pc, #288]	@ (8004c80 <TIM_Base_SetConfig+0x14c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <TIM_Base_SetConfig+0x48>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a47      	ldr	r2, [pc, #284]	@ (8004c84 <TIM_Base_SetConfig+0x150>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_Base_SetConfig+0x48>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a46      	ldr	r2, [pc, #280]	@ (8004c88 <TIM_Base_SetConfig+0x154>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0x48>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a45      	ldr	r2, [pc, #276]	@ (8004c8c <TIM_Base_SetConfig+0x158>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d108      	bne.n	8004b8e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a39      	ldr	r2, [pc, #228]	@ (8004c78 <TIM_Base_SetConfig+0x144>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d023      	beq.n	8004bde <TIM_Base_SetConfig+0xaa>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9c:	d01f      	beq.n	8004bde <TIM_Base_SetConfig+0xaa>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a36      	ldr	r2, [pc, #216]	@ (8004c7c <TIM_Base_SetConfig+0x148>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01b      	beq.n	8004bde <TIM_Base_SetConfig+0xaa>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a35      	ldr	r2, [pc, #212]	@ (8004c80 <TIM_Base_SetConfig+0x14c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d017      	beq.n	8004bde <TIM_Base_SetConfig+0xaa>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a34      	ldr	r2, [pc, #208]	@ (8004c84 <TIM_Base_SetConfig+0x150>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <TIM_Base_SetConfig+0xaa>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a33      	ldr	r2, [pc, #204]	@ (8004c88 <TIM_Base_SetConfig+0x154>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00f      	beq.n	8004bde <TIM_Base_SetConfig+0xaa>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a33      	ldr	r2, [pc, #204]	@ (8004c90 <TIM_Base_SetConfig+0x15c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00b      	beq.n	8004bde <TIM_Base_SetConfig+0xaa>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a32      	ldr	r2, [pc, #200]	@ (8004c94 <TIM_Base_SetConfig+0x160>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d007      	beq.n	8004bde <TIM_Base_SetConfig+0xaa>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a31      	ldr	r2, [pc, #196]	@ (8004c98 <TIM_Base_SetConfig+0x164>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d003      	beq.n	8004bde <TIM_Base_SetConfig+0xaa>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8004c8c <TIM_Base_SetConfig+0x158>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d108      	bne.n	8004bf0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a18      	ldr	r2, [pc, #96]	@ (8004c78 <TIM_Base_SetConfig+0x144>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d013      	beq.n	8004c44 <TIM_Base_SetConfig+0x110>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c88 <TIM_Base_SetConfig+0x154>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00f      	beq.n	8004c44 <TIM_Base_SetConfig+0x110>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a1a      	ldr	r2, [pc, #104]	@ (8004c90 <TIM_Base_SetConfig+0x15c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00b      	beq.n	8004c44 <TIM_Base_SetConfig+0x110>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a19      	ldr	r2, [pc, #100]	@ (8004c94 <TIM_Base_SetConfig+0x160>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d007      	beq.n	8004c44 <TIM_Base_SetConfig+0x110>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a18      	ldr	r2, [pc, #96]	@ (8004c98 <TIM_Base_SetConfig+0x164>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_Base_SetConfig+0x110>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a13      	ldr	r2, [pc, #76]	@ (8004c8c <TIM_Base_SetConfig+0x158>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d103      	bne.n	8004c4c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d105      	bne.n	8004c6a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f023 0201 	bic.w	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	611a      	str	r2, [r3, #16]
  }
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800
 8004c84:	40000c00 	.word	0x40000c00
 8004c88:	40013400 	.word	0x40013400
 8004c8c:	40015000 	.word	0x40015000
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800

08004c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f023 0201 	bic.w	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f023 0302 	bic.w	r3, r3, #2
 8004ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a30      	ldr	r2, [pc, #192]	@ (8004db8 <TIM_OC1_SetConfig+0x11c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <TIM_OC1_SetConfig+0x88>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a2f      	ldr	r2, [pc, #188]	@ (8004dbc <TIM_OC1_SetConfig+0x120>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00f      	beq.n	8004d24 <TIM_OC1_SetConfig+0x88>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a2e      	ldr	r2, [pc, #184]	@ (8004dc0 <TIM_OC1_SetConfig+0x124>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00b      	beq.n	8004d24 <TIM_OC1_SetConfig+0x88>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc4 <TIM_OC1_SetConfig+0x128>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d007      	beq.n	8004d24 <TIM_OC1_SetConfig+0x88>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc8 <TIM_OC1_SetConfig+0x12c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_OC1_SetConfig+0x88>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8004dcc <TIM_OC1_SetConfig+0x130>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d10c      	bne.n	8004d3e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0308 	bic.w	r3, r3, #8
 8004d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f023 0304 	bic.w	r3, r3, #4
 8004d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a1d      	ldr	r2, [pc, #116]	@ (8004db8 <TIM_OC1_SetConfig+0x11c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <TIM_OC1_SetConfig+0xd2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1c      	ldr	r2, [pc, #112]	@ (8004dbc <TIM_OC1_SetConfig+0x120>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00f      	beq.n	8004d6e <TIM_OC1_SetConfig+0xd2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc0 <TIM_OC1_SetConfig+0x124>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00b      	beq.n	8004d6e <TIM_OC1_SetConfig+0xd2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a1a      	ldr	r2, [pc, #104]	@ (8004dc4 <TIM_OC1_SetConfig+0x128>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d007      	beq.n	8004d6e <TIM_OC1_SetConfig+0xd2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a19      	ldr	r2, [pc, #100]	@ (8004dc8 <TIM_OC1_SetConfig+0x12c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d003      	beq.n	8004d6e <TIM_OC1_SetConfig+0xd2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a18      	ldr	r2, [pc, #96]	@ (8004dcc <TIM_OC1_SetConfig+0x130>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d111      	bne.n	8004d92 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	621a      	str	r2, [r3, #32]
}
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40013400 	.word	0x40013400
 8004dc0:	40014000 	.word	0x40014000
 8004dc4:	40014400 	.word	0x40014400
 8004dc8:	40014800 	.word	0x40014800
 8004dcc:	40015000 	.word	0x40015000

08004dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f023 0210 	bic.w	r2, r3, #16
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0320 	bic.w	r3, r3, #32
 8004e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ee0 <TIM_OC2_SetConfig+0x110>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d007      	beq.n	8004e44 <TIM_OC2_SetConfig+0x74>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a2b      	ldr	r2, [pc, #172]	@ (8004ee4 <TIM_OC2_SetConfig+0x114>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_OC2_SetConfig+0x74>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ee8 <TIM_OC2_SetConfig+0x118>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d10d      	bne.n	8004e60 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee0 <TIM_OC2_SetConfig+0x110>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d013      	beq.n	8004e90 <TIM_OC2_SetConfig+0xc0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee4 <TIM_OC2_SetConfig+0x114>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00f      	beq.n	8004e90 <TIM_OC2_SetConfig+0xc0>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a1e      	ldr	r2, [pc, #120]	@ (8004eec <TIM_OC2_SetConfig+0x11c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <TIM_OC2_SetConfig+0xc0>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ef0 <TIM_OC2_SetConfig+0x120>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d007      	beq.n	8004e90 <TIM_OC2_SetConfig+0xc0>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef4 <TIM_OC2_SetConfig+0x124>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_OC2_SetConfig+0xc0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a17      	ldr	r2, [pc, #92]	@ (8004ee8 <TIM_OC2_SetConfig+0x118>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d113      	bne.n	8004eb8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40012c00 	.word	0x40012c00
 8004ee4:	40013400 	.word	0x40013400
 8004ee8:	40015000 	.word	0x40015000
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800

08004ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2b      	ldr	r2, [pc, #172]	@ (8005004 <TIM_OC3_SetConfig+0x10c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d007      	beq.n	8004f6a <TIM_OC3_SetConfig+0x72>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2a      	ldr	r2, [pc, #168]	@ (8005008 <TIM_OC3_SetConfig+0x110>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d003      	beq.n	8004f6a <TIM_OC3_SetConfig+0x72>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a29      	ldr	r2, [pc, #164]	@ (800500c <TIM_OC3_SetConfig+0x114>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d10d      	bne.n	8004f86 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1e      	ldr	r2, [pc, #120]	@ (8005004 <TIM_OC3_SetConfig+0x10c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d013      	beq.n	8004fb6 <TIM_OC3_SetConfig+0xbe>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1d      	ldr	r2, [pc, #116]	@ (8005008 <TIM_OC3_SetConfig+0x110>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00f      	beq.n	8004fb6 <TIM_OC3_SetConfig+0xbe>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a1d      	ldr	r2, [pc, #116]	@ (8005010 <TIM_OC3_SetConfig+0x118>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00b      	beq.n	8004fb6 <TIM_OC3_SetConfig+0xbe>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8005014 <TIM_OC3_SetConfig+0x11c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d007      	beq.n	8004fb6 <TIM_OC3_SetConfig+0xbe>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8005018 <TIM_OC3_SetConfig+0x120>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <TIM_OC3_SetConfig+0xbe>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a16      	ldr	r2, [pc, #88]	@ (800500c <TIM_OC3_SetConfig+0x114>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d113      	bne.n	8004fde <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	621a      	str	r2, [r3, #32]
}
 8004ff8:	bf00      	nop
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40012c00 	.word	0x40012c00
 8005008:	40013400 	.word	0x40013400
 800500c:	40015000 	.word	0x40015000
 8005010:	40014000 	.word	0x40014000
 8005014:	40014400 	.word	0x40014400
 8005018:	40014800 	.word	0x40014800

0800501c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800504a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800504e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800506a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	031b      	lsls	r3, r3, #12
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a2c      	ldr	r2, [pc, #176]	@ (800512c <TIM_OC4_SetConfig+0x110>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d007      	beq.n	8005090 <TIM_OC4_SetConfig+0x74>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a2b      	ldr	r2, [pc, #172]	@ (8005130 <TIM_OC4_SetConfig+0x114>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d003      	beq.n	8005090 <TIM_OC4_SetConfig+0x74>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a2a      	ldr	r2, [pc, #168]	@ (8005134 <TIM_OC4_SetConfig+0x118>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10d      	bne.n	80050ac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	031b      	lsls	r3, r3, #12
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a1f      	ldr	r2, [pc, #124]	@ (800512c <TIM_OC4_SetConfig+0x110>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <TIM_OC4_SetConfig+0xc0>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005130 <TIM_OC4_SetConfig+0x114>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00f      	beq.n	80050dc <TIM_OC4_SetConfig+0xc0>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a1e      	ldr	r2, [pc, #120]	@ (8005138 <TIM_OC4_SetConfig+0x11c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00b      	beq.n	80050dc <TIM_OC4_SetConfig+0xc0>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a1d      	ldr	r2, [pc, #116]	@ (800513c <TIM_OC4_SetConfig+0x120>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_OC4_SetConfig+0xc0>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005140 <TIM_OC4_SetConfig+0x124>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_OC4_SetConfig+0xc0>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a17      	ldr	r2, [pc, #92]	@ (8005134 <TIM_OC4_SetConfig+0x118>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d113      	bne.n	8005104 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050e2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050ea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	019b      	lsls	r3, r3, #6
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	019b      	lsls	r3, r3, #6
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40012c00 	.word	0x40012c00
 8005130:	40013400 	.word	0x40013400
 8005134:	40015000 	.word	0x40015000
 8005138:	40014000 	.word	0x40014000
 800513c:	40014400 	.word	0x40014400
 8005140:	40014800 	.word	0x40014800

08005144 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005188:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	041b      	lsls	r3, r3, #16
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a19      	ldr	r2, [pc, #100]	@ (8005200 <TIM_OC5_SetConfig+0xbc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d013      	beq.n	80051c6 <TIM_OC5_SetConfig+0x82>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a18      	ldr	r2, [pc, #96]	@ (8005204 <TIM_OC5_SetConfig+0xc0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00f      	beq.n	80051c6 <TIM_OC5_SetConfig+0x82>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a17      	ldr	r2, [pc, #92]	@ (8005208 <TIM_OC5_SetConfig+0xc4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00b      	beq.n	80051c6 <TIM_OC5_SetConfig+0x82>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a16      	ldr	r2, [pc, #88]	@ (800520c <TIM_OC5_SetConfig+0xc8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d007      	beq.n	80051c6 <TIM_OC5_SetConfig+0x82>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a15      	ldr	r2, [pc, #84]	@ (8005210 <TIM_OC5_SetConfig+0xcc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d003      	beq.n	80051c6 <TIM_OC5_SetConfig+0x82>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a14      	ldr	r2, [pc, #80]	@ (8005214 <TIM_OC5_SetConfig+0xd0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d109      	bne.n	80051da <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	621a      	str	r2, [r3, #32]
}
 80051f4:	bf00      	nop
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40013400 	.word	0x40013400
 8005208:	40014000 	.word	0x40014000
 800520c:	40014400 	.word	0x40014400
 8005210:	40014800 	.word	0x40014800
 8005214:	40015000 	.word	0x40015000

08005218 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800524a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800525e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	051b      	lsls	r3, r3, #20
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a1a      	ldr	r2, [pc, #104]	@ (80052d8 <TIM_OC6_SetConfig+0xc0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d013      	beq.n	800529c <TIM_OC6_SetConfig+0x84>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a19      	ldr	r2, [pc, #100]	@ (80052dc <TIM_OC6_SetConfig+0xc4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00f      	beq.n	800529c <TIM_OC6_SetConfig+0x84>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a18      	ldr	r2, [pc, #96]	@ (80052e0 <TIM_OC6_SetConfig+0xc8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00b      	beq.n	800529c <TIM_OC6_SetConfig+0x84>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a17      	ldr	r2, [pc, #92]	@ (80052e4 <TIM_OC6_SetConfig+0xcc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d007      	beq.n	800529c <TIM_OC6_SetConfig+0x84>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a16      	ldr	r2, [pc, #88]	@ (80052e8 <TIM_OC6_SetConfig+0xd0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_OC6_SetConfig+0x84>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a15      	ldr	r2, [pc, #84]	@ (80052ec <TIM_OC6_SetConfig+0xd4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d109      	bne.n	80052b0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	029b      	lsls	r3, r3, #10
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40013400 	.word	0x40013400
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800
 80052ec:	40015000 	.word	0x40015000

080052f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f023 0201 	bic.w	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800531a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 030a 	bic.w	r3, r3, #10
 800532c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800534e:	b480      	push	{r7}
 8005350:	b087      	sub	sp, #28
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f023 0210 	bic.w	r2, r3, #16
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	031b      	lsls	r3, r3, #12
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800538a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80053c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f043 0307 	orr.w	r3, r3, #7
 80053d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	609a      	str	r2, [r3, #8]
}
 80053dc:	bf00      	nop
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	021a      	lsls	r2, r3, #8
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	431a      	orrs	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4313      	orrs	r3, r2
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	609a      	str	r2, [r3, #8]
}
 800541c:	bf00      	nop
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	2201      	movs	r2, #1
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a1a      	ldr	r2, [r3, #32]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	43db      	mvns	r3, r3
 800544a:	401a      	ands	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	fa01 f303 	lsl.w	r3, r1, r3
 8005460:	431a      	orrs	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005488:	2302      	movs	r3, #2
 800548a:	e074      	b.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a34      	ldr	r2, [pc, #208]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d009      	beq.n	80054ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a33      	ldr	r2, [pc, #204]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d004      	beq.n	80054ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a31      	ldr	r2, [pc, #196]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d108      	bne.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80054d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80054e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a21      	ldr	r2, [pc, #132]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d022      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550c:	d01d      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1f      	ldr	r2, [pc, #124]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d018      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1d      	ldr	r2, [pc, #116]	@ (8005594 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1c      	ldr	r2, [pc, #112]	@ (8005598 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00e      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a15      	ldr	r2, [pc, #84]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a18      	ldr	r2, [pc, #96]	@ (800559c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a11      	ldr	r2, [pc, #68]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d10c      	bne.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	4313      	orrs	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40013400 	.word	0x40013400
 800558c:	40015000 	.word	0x40015000
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800
 8005598:	40000c00 	.word	0x40000c00
 800559c:	40014000 	.word	0x40014000

080055a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e078      	b.n	80056ae <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	041b      	lsls	r3, r3, #16
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1c      	ldr	r2, [pc, #112]	@ (80056bc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1b      	ldr	r2, [pc, #108]	@ (80056c0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a19      	ldr	r2, [pc, #100]	@ (80056c4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d11c      	bne.n	800569c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566c:	051b      	lsls	r3, r3, #20
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40013400 	.word	0x40013400
 80056c4:	40015000 	.word	0x40015000

080056c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <memset>:
 8005754:	4402      	add	r2, r0
 8005756:	4603      	mov	r3, r0
 8005758:	4293      	cmp	r3, r2
 800575a:	d100      	bne.n	800575e <memset+0xa>
 800575c:	4770      	bx	lr
 800575e:	f803 1b01 	strb.w	r1, [r3], #1
 8005762:	e7f9      	b.n	8005758 <memset+0x4>

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	4d0d      	ldr	r5, [pc, #52]	@ (800579c <__libc_init_array+0x38>)
 8005768:	4c0d      	ldr	r4, [pc, #52]	@ (80057a0 <__libc_init_array+0x3c>)
 800576a:	1b64      	subs	r4, r4, r5
 800576c:	10a4      	asrs	r4, r4, #2
 800576e:	2600      	movs	r6, #0
 8005770:	42a6      	cmp	r6, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	4d0b      	ldr	r5, [pc, #44]	@ (80057a4 <__libc_init_array+0x40>)
 8005776:	4c0c      	ldr	r4, [pc, #48]	@ (80057a8 <__libc_init_array+0x44>)
 8005778:	f000 fd48 	bl	800620c <_init>
 800577c:	1b64      	subs	r4, r4, r5
 800577e:	10a4      	asrs	r4, r4, #2
 8005780:	2600      	movs	r6, #0
 8005782:	42a6      	cmp	r6, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	f855 3b04 	ldr.w	r3, [r5], #4
 800578c:	4798      	blx	r3
 800578e:	3601      	adds	r6, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	f855 3b04 	ldr.w	r3, [r5], #4
 8005796:	4798      	blx	r3
 8005798:	3601      	adds	r6, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	08006644 	.word	0x08006644
 80057a0:	08006644 	.word	0x08006644
 80057a4:	08006644 	.word	0x08006644
 80057a8:	08006648 	.word	0x08006648

080057ac <sinf>:
 80057ac:	ee10 3a10 	vmov	r3, s0
 80057b0:	b507      	push	{r0, r1, r2, lr}
 80057b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005830 <sinf+0x84>)
 80057b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d807      	bhi.n	80057cc <sinf+0x20>
 80057bc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8005834 <sinf+0x88>
 80057c0:	2000      	movs	r0, #0
 80057c2:	b003      	add	sp, #12
 80057c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057c8:	f000 b88e 	b.w	80058e8 <__kernel_sinf>
 80057cc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80057d0:	d304      	bcc.n	80057dc <sinf+0x30>
 80057d2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80057d6:	b003      	add	sp, #12
 80057d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80057dc:	4668      	mov	r0, sp
 80057de:	f000 f8cb 	bl	8005978 <__ieee754_rem_pio2f>
 80057e2:	f000 0003 	and.w	r0, r0, #3
 80057e6:	2801      	cmp	r0, #1
 80057e8:	d00a      	beq.n	8005800 <sinf+0x54>
 80057ea:	2802      	cmp	r0, #2
 80057ec:	d00f      	beq.n	800580e <sinf+0x62>
 80057ee:	b9c0      	cbnz	r0, 8005822 <sinf+0x76>
 80057f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80057f4:	ed9d 0a00 	vldr	s0, [sp]
 80057f8:	2001      	movs	r0, #1
 80057fa:	f000 f875 	bl	80058e8 <__kernel_sinf>
 80057fe:	e7ea      	b.n	80057d6 <sinf+0x2a>
 8005800:	eddd 0a01 	vldr	s1, [sp, #4]
 8005804:	ed9d 0a00 	vldr	s0, [sp]
 8005808:	f000 f816 	bl	8005838 <__kernel_cosf>
 800580c:	e7e3      	b.n	80057d6 <sinf+0x2a>
 800580e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005812:	ed9d 0a00 	vldr	s0, [sp]
 8005816:	2001      	movs	r0, #1
 8005818:	f000 f866 	bl	80058e8 <__kernel_sinf>
 800581c:	eeb1 0a40 	vneg.f32	s0, s0
 8005820:	e7d9      	b.n	80057d6 <sinf+0x2a>
 8005822:	eddd 0a01 	vldr	s1, [sp, #4]
 8005826:	ed9d 0a00 	vldr	s0, [sp]
 800582a:	f000 f805 	bl	8005838 <__kernel_cosf>
 800582e:	e7f5      	b.n	800581c <sinf+0x70>
 8005830:	3f490fd8 	.word	0x3f490fd8
 8005834:	00000000 	.word	0x00000000

08005838 <__kernel_cosf>:
 8005838:	ee10 3a10 	vmov	r3, s0
 800583c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005840:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005844:	eef0 6a40 	vmov.f32	s13, s0
 8005848:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800584c:	d204      	bcs.n	8005858 <__kernel_cosf+0x20>
 800584e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8005852:	ee17 2a90 	vmov	r2, s15
 8005856:	b342      	cbz	r2, 80058aa <__kernel_cosf+0x72>
 8005858:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800585c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80058c8 <__kernel_cosf+0x90>
 8005860:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80058cc <__kernel_cosf+0x94>
 8005864:	4a1a      	ldr	r2, [pc, #104]	@ (80058d0 <__kernel_cosf+0x98>)
 8005866:	eea7 6a27 	vfma.f32	s12, s14, s15
 800586a:	4293      	cmp	r3, r2
 800586c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80058d4 <__kernel_cosf+0x9c>
 8005870:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005874:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80058d8 <__kernel_cosf+0xa0>
 8005878:	eea7 6a87 	vfma.f32	s12, s15, s14
 800587c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80058dc <__kernel_cosf+0xa4>
 8005880:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005884:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80058e0 <__kernel_cosf+0xa8>
 8005888:	eea7 6a87 	vfma.f32	s12, s15, s14
 800588c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8005890:	ee26 6a07 	vmul.f32	s12, s12, s14
 8005894:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005898:	eee7 0a06 	vfma.f32	s1, s14, s12
 800589c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a0:	d804      	bhi.n	80058ac <__kernel_cosf+0x74>
 80058a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80058a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80058aa:	4770      	bx	lr
 80058ac:	4a0d      	ldr	r2, [pc, #52]	@ (80058e4 <__kernel_cosf+0xac>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	bf9a      	itte	ls
 80058b2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80058b6:	ee07 3a10 	vmovls	s14, r3
 80058ba:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80058be:	ee30 0a47 	vsub.f32	s0, s0, s14
 80058c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058c6:	e7ec      	b.n	80058a2 <__kernel_cosf+0x6a>
 80058c8:	ad47d74e 	.word	0xad47d74e
 80058cc:	310f74f6 	.word	0x310f74f6
 80058d0:	3e999999 	.word	0x3e999999
 80058d4:	b493f27c 	.word	0xb493f27c
 80058d8:	37d00d01 	.word	0x37d00d01
 80058dc:	bab60b61 	.word	0xbab60b61
 80058e0:	3d2aaaab 	.word	0x3d2aaaab
 80058e4:	3f480000 	.word	0x3f480000

080058e8 <__kernel_sinf>:
 80058e8:	ee10 3a10 	vmov	r3, s0
 80058ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80058f0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80058f4:	d204      	bcs.n	8005900 <__kernel_sinf+0x18>
 80058f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80058fa:	ee17 3a90 	vmov	r3, s15
 80058fe:	b35b      	cbz	r3, 8005958 <__kernel_sinf+0x70>
 8005900:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005904:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800595c <__kernel_sinf+0x74>
 8005908:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8005960 <__kernel_sinf+0x78>
 800590c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005910:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8005964 <__kernel_sinf+0x7c>
 8005914:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005918:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8005968 <__kernel_sinf+0x80>
 800591c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005920:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800596c <__kernel_sinf+0x84>
 8005924:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005928:	eee6 7a07 	vfma.f32	s15, s12, s14
 800592c:	b930      	cbnz	r0, 800593c <__kernel_sinf+0x54>
 800592e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8005970 <__kernel_sinf+0x88>
 8005932:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005936:	eea6 0a26 	vfma.f32	s0, s12, s13
 800593a:	4770      	bx	lr
 800593c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005940:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8005944:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005948:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800594c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8005974 <__kernel_sinf+0x8c>
 8005950:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005954:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	2f2ec9d3 	.word	0x2f2ec9d3
 8005960:	b2d72f34 	.word	0xb2d72f34
 8005964:	3638ef1b 	.word	0x3638ef1b
 8005968:	b9500d01 	.word	0xb9500d01
 800596c:	3c088889 	.word	0x3c088889
 8005970:	be2aaaab 	.word	0xbe2aaaab
 8005974:	3e2aaaab 	.word	0x3e2aaaab

08005978 <__ieee754_rem_pio2f>:
 8005978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800597a:	ee10 6a10 	vmov	r6, s0
 800597e:	4b88      	ldr	r3, [pc, #544]	@ (8005ba0 <__ieee754_rem_pio2f+0x228>)
 8005980:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8005984:	429d      	cmp	r5, r3
 8005986:	b087      	sub	sp, #28
 8005988:	4604      	mov	r4, r0
 800598a:	d805      	bhi.n	8005998 <__ieee754_rem_pio2f+0x20>
 800598c:	2300      	movs	r3, #0
 800598e:	ed80 0a00 	vstr	s0, [r0]
 8005992:	6043      	str	r3, [r0, #4]
 8005994:	2000      	movs	r0, #0
 8005996:	e022      	b.n	80059de <__ieee754_rem_pio2f+0x66>
 8005998:	4b82      	ldr	r3, [pc, #520]	@ (8005ba4 <__ieee754_rem_pio2f+0x22c>)
 800599a:	429d      	cmp	r5, r3
 800599c:	d83a      	bhi.n	8005a14 <__ieee754_rem_pio2f+0x9c>
 800599e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80059a2:	2e00      	cmp	r6, #0
 80059a4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005ba8 <__ieee754_rem_pio2f+0x230>
 80059a8:	4a80      	ldr	r2, [pc, #512]	@ (8005bac <__ieee754_rem_pio2f+0x234>)
 80059aa:	f023 030f 	bic.w	r3, r3, #15
 80059ae:	dd18      	ble.n	80059e2 <__ieee754_rem_pio2f+0x6a>
 80059b0:	4293      	cmp	r3, r2
 80059b2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80059b6:	bf09      	itett	eq
 80059b8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8005bb0 <__ieee754_rem_pio2f+0x238>
 80059bc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8005bb4 <__ieee754_rem_pio2f+0x23c>
 80059c0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8005bb8 <__ieee754_rem_pio2f+0x240>
 80059c4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80059c8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80059cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059d0:	ed80 7a00 	vstr	s14, [r0]
 80059d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80059d8:	edc0 7a01 	vstr	s15, [r0, #4]
 80059dc:	2001      	movs	r0, #1
 80059de:	b007      	add	sp, #28
 80059e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e2:	4293      	cmp	r3, r2
 80059e4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80059e8:	bf09      	itett	eq
 80059ea:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8005bb0 <__ieee754_rem_pio2f+0x238>
 80059ee:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8005bb4 <__ieee754_rem_pio2f+0x23c>
 80059f2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8005bb8 <__ieee754_rem_pio2f+0x240>
 80059f6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80059fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80059fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a02:	ed80 7a00 	vstr	s14, [r0]
 8005a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0a:	edc0 7a01 	vstr	s15, [r0, #4]
 8005a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a12:	e7e4      	b.n	80059de <__ieee754_rem_pio2f+0x66>
 8005a14:	4b69      	ldr	r3, [pc, #420]	@ (8005bbc <__ieee754_rem_pio2f+0x244>)
 8005a16:	429d      	cmp	r5, r3
 8005a18:	d873      	bhi.n	8005b02 <__ieee754_rem_pio2f+0x18a>
 8005a1a:	f000 f8dd 	bl	8005bd8 <fabsf>
 8005a1e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005bc0 <__ieee754_rem_pio2f+0x248>
 8005a22:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005a26:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a32:	ee17 0a90 	vmov	r0, s15
 8005a36:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005ba8 <__ieee754_rem_pio2f+0x230>
 8005a3a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005a3e:	281f      	cmp	r0, #31
 8005a40:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005bb4 <__ieee754_rem_pio2f+0x23c>
 8005a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a48:	eeb1 6a47 	vneg.f32	s12, s14
 8005a4c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005a50:	ee16 1a90 	vmov	r1, s13
 8005a54:	dc09      	bgt.n	8005a6a <__ieee754_rem_pio2f+0xf2>
 8005a56:	4a5b      	ldr	r2, [pc, #364]	@ (8005bc4 <__ieee754_rem_pio2f+0x24c>)
 8005a58:	1e47      	subs	r7, r0, #1
 8005a5a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005a5e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8005a62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d107      	bne.n	8005a7a <__ieee754_rem_pio2f+0x102>
 8005a6a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8005a6e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8005a72:	2a08      	cmp	r2, #8
 8005a74:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8005a78:	dc14      	bgt.n	8005aa4 <__ieee754_rem_pio2f+0x12c>
 8005a7a:	6021      	str	r1, [r4, #0]
 8005a7c:	ed94 7a00 	vldr	s14, [r4]
 8005a80:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005a84:	2e00      	cmp	r6, #0
 8005a86:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005a8a:	ed84 0a01 	vstr	s0, [r4, #4]
 8005a8e:	daa6      	bge.n	80059de <__ieee754_rem_pio2f+0x66>
 8005a90:	eeb1 7a47 	vneg.f32	s14, s14
 8005a94:	eeb1 0a40 	vneg.f32	s0, s0
 8005a98:	ed84 7a00 	vstr	s14, [r4]
 8005a9c:	ed84 0a01 	vstr	s0, [r4, #4]
 8005aa0:	4240      	negs	r0, r0
 8005aa2:	e79c      	b.n	80059de <__ieee754_rem_pio2f+0x66>
 8005aa4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8005bb0 <__ieee754_rem_pio2f+0x238>
 8005aa8:	eef0 6a40 	vmov.f32	s13, s0
 8005aac:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005ab0:	ee70 7a66 	vsub.f32	s15, s0, s13
 8005ab4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005ab8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005bb8 <__ieee754_rem_pio2f+0x240>
 8005abc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005ac0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005ac4:	ee15 2a90 	vmov	r2, s11
 8005ac8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005acc:	1a5b      	subs	r3, r3, r1
 8005ace:	2b19      	cmp	r3, #25
 8005ad0:	dc04      	bgt.n	8005adc <__ieee754_rem_pio2f+0x164>
 8005ad2:	edc4 5a00 	vstr	s11, [r4]
 8005ad6:	eeb0 0a66 	vmov.f32	s0, s13
 8005ada:	e7cf      	b.n	8005a7c <__ieee754_rem_pio2f+0x104>
 8005adc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8005bc8 <__ieee754_rem_pio2f+0x250>
 8005ae0:	eeb0 0a66 	vmov.f32	s0, s13
 8005ae4:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005ae8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005aec:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8005bcc <__ieee754_rem_pio2f+0x254>
 8005af0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005af4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005af8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005afc:	ed84 7a00 	vstr	s14, [r4]
 8005b00:	e7bc      	b.n	8005a7c <__ieee754_rem_pio2f+0x104>
 8005b02:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8005b06:	d306      	bcc.n	8005b16 <__ieee754_rem_pio2f+0x19e>
 8005b08:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005b0c:	edc0 7a01 	vstr	s15, [r0, #4]
 8005b10:	edc0 7a00 	vstr	s15, [r0]
 8005b14:	e73e      	b.n	8005994 <__ieee754_rem_pio2f+0x1c>
 8005b16:	15ea      	asrs	r2, r5, #23
 8005b18:	3a86      	subs	r2, #134	@ 0x86
 8005b1a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b26:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8005bd0 <__ieee754_rem_pio2f+0x258>
 8005b2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005b2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b32:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005b36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005b3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005b42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b46:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005b4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005b4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b56:	edcd 7a05 	vstr	s15, [sp, #20]
 8005b5a:	d11e      	bne.n	8005b9a <__ieee754_rem_pio2f+0x222>
 8005b5c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b64:	bf0c      	ite	eq
 8005b66:	2301      	moveq	r3, #1
 8005b68:	2302      	movne	r3, #2
 8005b6a:	491a      	ldr	r1, [pc, #104]	@ (8005bd4 <__ieee754_rem_pio2f+0x25c>)
 8005b6c:	9101      	str	r1, [sp, #4]
 8005b6e:	2102      	movs	r1, #2
 8005b70:	9100      	str	r1, [sp, #0]
 8005b72:	a803      	add	r0, sp, #12
 8005b74:	4621      	mov	r1, r4
 8005b76:	f000 f837 	bl	8005be8 <__kernel_rem_pio2f>
 8005b7a:	2e00      	cmp	r6, #0
 8005b7c:	f6bf af2f 	bge.w	80059de <__ieee754_rem_pio2f+0x66>
 8005b80:	edd4 7a00 	vldr	s15, [r4]
 8005b84:	eef1 7a67 	vneg.f32	s15, s15
 8005b88:	edc4 7a00 	vstr	s15, [r4]
 8005b8c:	edd4 7a01 	vldr	s15, [r4, #4]
 8005b90:	eef1 7a67 	vneg.f32	s15, s15
 8005b94:	edc4 7a01 	vstr	s15, [r4, #4]
 8005b98:	e782      	b.n	8005aa0 <__ieee754_rem_pio2f+0x128>
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e7e5      	b.n	8005b6a <__ieee754_rem_pio2f+0x1f2>
 8005b9e:	bf00      	nop
 8005ba0:	3f490fd8 	.word	0x3f490fd8
 8005ba4:	4016cbe3 	.word	0x4016cbe3
 8005ba8:	3fc90f80 	.word	0x3fc90f80
 8005bac:	3fc90fd0 	.word	0x3fc90fd0
 8005bb0:	37354400 	.word	0x37354400
 8005bb4:	37354443 	.word	0x37354443
 8005bb8:	2e85a308 	.word	0x2e85a308
 8005bbc:	43490f80 	.word	0x43490f80
 8005bc0:	3f22f984 	.word	0x3f22f984
 8005bc4:	08006274 	.word	0x08006274
 8005bc8:	2e85a300 	.word	0x2e85a300
 8005bcc:	248d3132 	.word	0x248d3132
 8005bd0:	43800000 	.word	0x43800000
 8005bd4:	080062f4 	.word	0x080062f4

08005bd8 <fabsf>:
 8005bd8:	ee10 3a10 	vmov	r3, s0
 8005bdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005be0:	ee00 3a10 	vmov	s0, r3
 8005be4:	4770      	bx	lr
	...

08005be8 <__kernel_rem_pio2f>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	ed2d 8b04 	vpush	{d8-d9}
 8005bf0:	b0d9      	sub	sp, #356	@ 0x164
 8005bf2:	4690      	mov	r8, r2
 8005bf4:	9001      	str	r0, [sp, #4]
 8005bf6:	4ab6      	ldr	r2, [pc, #728]	@ (8005ed0 <__kernel_rem_pio2f+0x2e8>)
 8005bf8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8005bfa:	f118 0f04 	cmn.w	r8, #4
 8005bfe:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8005c02:	460f      	mov	r7, r1
 8005c04:	f103 3bff 	add.w	fp, r3, #4294967295
 8005c08:	db26      	blt.n	8005c58 <__kernel_rem_pio2f+0x70>
 8005c0a:	f1b8 0203 	subs.w	r2, r8, #3
 8005c0e:	bf48      	it	mi
 8005c10:	f108 0204 	addmi.w	r2, r8, #4
 8005c14:	10d2      	asrs	r2, r2, #3
 8005c16:	1c55      	adds	r5, r2, #1
 8005c18:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005c1a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8005ee0 <__kernel_rem_pio2f+0x2f8>
 8005c1e:	00e8      	lsls	r0, r5, #3
 8005c20:	eba2 060b 	sub.w	r6, r2, fp
 8005c24:	9002      	str	r0, [sp, #8]
 8005c26:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8005c2a:	eb0a 0c0b 	add.w	ip, sl, fp
 8005c2e:	ac1c      	add	r4, sp, #112	@ 0x70
 8005c30:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8005c34:	2000      	movs	r0, #0
 8005c36:	4560      	cmp	r0, ip
 8005c38:	dd10      	ble.n	8005c5c <__kernel_rem_pio2f+0x74>
 8005c3a:	a91c      	add	r1, sp, #112	@ 0x70
 8005c3c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8005c40:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8005c44:	2600      	movs	r6, #0
 8005c46:	4556      	cmp	r6, sl
 8005c48:	dc24      	bgt.n	8005c94 <__kernel_rem_pio2f+0xac>
 8005c4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005c4e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8005ee0 <__kernel_rem_pio2f+0x2f8>
 8005c52:	4684      	mov	ip, r0
 8005c54:	2400      	movs	r4, #0
 8005c56:	e016      	b.n	8005c86 <__kernel_rem_pio2f+0x9e>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	e7dc      	b.n	8005c16 <__kernel_rem_pio2f+0x2e>
 8005c5c:	42c6      	cmn	r6, r0
 8005c5e:	bf5d      	ittte	pl
 8005c60:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8005c64:	ee07 1a90 	vmovpl	s15, r1
 8005c68:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005c6c:	eef0 7a47 	vmovmi.f32	s15, s14
 8005c70:	ece4 7a01 	vstmia	r4!, {s15}
 8005c74:	3001      	adds	r0, #1
 8005c76:	e7de      	b.n	8005c36 <__kernel_rem_pio2f+0x4e>
 8005c78:	ecfe 6a01 	vldmia	lr!, {s13}
 8005c7c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8005c80:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005c84:	3401      	adds	r4, #1
 8005c86:	455c      	cmp	r4, fp
 8005c88:	ddf6      	ble.n	8005c78 <__kernel_rem_pio2f+0x90>
 8005c8a:	ece9 7a01 	vstmia	r9!, {s15}
 8005c8e:	3601      	adds	r6, #1
 8005c90:	3004      	adds	r0, #4
 8005c92:	e7d8      	b.n	8005c46 <__kernel_rem_pio2f+0x5e>
 8005c94:	a908      	add	r1, sp, #32
 8005c96:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c9a:	9104      	str	r1, [sp, #16]
 8005c9c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005c9e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8005edc <__kernel_rem_pio2f+0x2f4>
 8005ca2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8005ed8 <__kernel_rem_pio2f+0x2f0>
 8005ca6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005caa:	9203      	str	r2, [sp, #12]
 8005cac:	4654      	mov	r4, sl
 8005cae:	00a2      	lsls	r2, r4, #2
 8005cb0:	9205      	str	r2, [sp, #20]
 8005cb2:	aa58      	add	r2, sp, #352	@ 0x160
 8005cb4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005cb8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8005cbc:	a944      	add	r1, sp, #272	@ 0x110
 8005cbe:	aa08      	add	r2, sp, #32
 8005cc0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8005cc4:	4694      	mov	ip, r2
 8005cc6:	4626      	mov	r6, r4
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	dc4c      	bgt.n	8005d66 <__kernel_rem_pio2f+0x17e>
 8005ccc:	4628      	mov	r0, r5
 8005cce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005cd2:	f000 f9f1 	bl	80060b8 <scalbnf>
 8005cd6:	eeb0 8a40 	vmov.f32	s16, s0
 8005cda:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8005cde:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005ce2:	f000 fa4f 	bl	8006184 <floorf>
 8005ce6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8005cea:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cf4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005cf8:	ee17 9a90 	vmov	r9, s15
 8005cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d00:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005d04:	dd41      	ble.n	8005d8a <__kernel_rem_pio2f+0x1a2>
 8005d06:	f104 3cff 	add.w	ip, r4, #4294967295
 8005d0a:	a908      	add	r1, sp, #32
 8005d0c:	f1c5 0e08 	rsb	lr, r5, #8
 8005d10:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8005d14:	fa46 f00e 	asr.w	r0, r6, lr
 8005d18:	4481      	add	r9, r0
 8005d1a:	fa00 f00e 	lsl.w	r0, r0, lr
 8005d1e:	1a36      	subs	r6, r6, r0
 8005d20:	f1c5 0007 	rsb	r0, r5, #7
 8005d24:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8005d28:	4106      	asrs	r6, r0
 8005d2a:	2e00      	cmp	r6, #0
 8005d2c:	dd3c      	ble.n	8005da8 <__kernel_rem_pio2f+0x1c0>
 8005d2e:	f04f 0e00 	mov.w	lr, #0
 8005d32:	f109 0901 	add.w	r9, r9, #1
 8005d36:	4670      	mov	r0, lr
 8005d38:	4574      	cmp	r4, lr
 8005d3a:	dc68      	bgt.n	8005e0e <__kernel_rem_pio2f+0x226>
 8005d3c:	2d00      	cmp	r5, #0
 8005d3e:	dd03      	ble.n	8005d48 <__kernel_rem_pio2f+0x160>
 8005d40:	2d01      	cmp	r5, #1
 8005d42:	d074      	beq.n	8005e2e <__kernel_rem_pio2f+0x246>
 8005d44:	2d02      	cmp	r5, #2
 8005d46:	d07d      	beq.n	8005e44 <__kernel_rem_pio2f+0x25c>
 8005d48:	2e02      	cmp	r6, #2
 8005d4a:	d12d      	bne.n	8005da8 <__kernel_rem_pio2f+0x1c0>
 8005d4c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005d50:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005d54:	b340      	cbz	r0, 8005da8 <__kernel_rem_pio2f+0x1c0>
 8005d56:	4628      	mov	r0, r5
 8005d58:	9306      	str	r3, [sp, #24]
 8005d5a:	f000 f9ad 	bl	80060b8 <scalbnf>
 8005d5e:	9b06      	ldr	r3, [sp, #24]
 8005d60:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005d64:	e020      	b.n	8005da8 <__kernel_rem_pio2f+0x1c0>
 8005d66:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005d6a:	3e01      	subs	r6, #1
 8005d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d74:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005d78:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005d7c:	ecac 0a01 	vstmia	ip!, {s0}
 8005d80:	ed30 0a01 	vldmdb	r0!, {s0}
 8005d84:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005d88:	e79e      	b.n	8005cc8 <__kernel_rem_pio2f+0xe0>
 8005d8a:	d105      	bne.n	8005d98 <__kernel_rem_pio2f+0x1b0>
 8005d8c:	1e60      	subs	r0, r4, #1
 8005d8e:	a908      	add	r1, sp, #32
 8005d90:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8005d94:	11f6      	asrs	r6, r6, #7
 8005d96:	e7c8      	b.n	8005d2a <__kernel_rem_pio2f+0x142>
 8005d98:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005d9c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da4:	da31      	bge.n	8005e0a <__kernel_rem_pio2f+0x222>
 8005da6:	2600      	movs	r6, #0
 8005da8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db0:	f040 8098 	bne.w	8005ee4 <__kernel_rem_pio2f+0x2fc>
 8005db4:	1e60      	subs	r0, r4, #1
 8005db6:	2200      	movs	r2, #0
 8005db8:	4550      	cmp	r0, sl
 8005dba:	da4b      	bge.n	8005e54 <__kernel_rem_pio2f+0x26c>
 8005dbc:	2a00      	cmp	r2, #0
 8005dbe:	d065      	beq.n	8005e8c <__kernel_rem_pio2f+0x2a4>
 8005dc0:	3c01      	subs	r4, #1
 8005dc2:	ab08      	add	r3, sp, #32
 8005dc4:	3d08      	subs	r5, #8
 8005dc6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f8      	beq.n	8005dc0 <__kernel_rem_pio2f+0x1d8>
 8005dce:	4628      	mov	r0, r5
 8005dd0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005dd4:	f000 f970 	bl	80060b8 <scalbnf>
 8005dd8:	1c63      	adds	r3, r4, #1
 8005dda:	aa44      	add	r2, sp, #272	@ 0x110
 8005ddc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005edc <__kernel_rem_pio2f+0x2f4>
 8005de0:	0099      	lsls	r1, r3, #2
 8005de2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005de6:	4623      	mov	r3, r4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f280 80a9 	bge.w	8005f40 <__kernel_rem_pio2f+0x358>
 8005dee:	4623      	mov	r3, r4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f2c0 80c7 	blt.w	8005f84 <__kernel_rem_pio2f+0x39c>
 8005df6:	aa44      	add	r2, sp, #272	@ 0x110
 8005df8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005dfc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8005ed4 <__kernel_rem_pio2f+0x2ec>
 8005e00:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8005ee0 <__kernel_rem_pio2f+0x2f8>
 8005e04:	2000      	movs	r0, #0
 8005e06:	1ae2      	subs	r2, r4, r3
 8005e08:	e0b1      	b.n	8005f6e <__kernel_rem_pio2f+0x386>
 8005e0a:	2602      	movs	r6, #2
 8005e0c:	e78f      	b.n	8005d2e <__kernel_rem_pio2f+0x146>
 8005e0e:	f852 1b04 	ldr.w	r1, [r2], #4
 8005e12:	b948      	cbnz	r0, 8005e28 <__kernel_rem_pio2f+0x240>
 8005e14:	b121      	cbz	r1, 8005e20 <__kernel_rem_pio2f+0x238>
 8005e16:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8005e1a:	f842 1c04 	str.w	r1, [r2, #-4]
 8005e1e:	2101      	movs	r1, #1
 8005e20:	f10e 0e01 	add.w	lr, lr, #1
 8005e24:	4608      	mov	r0, r1
 8005e26:	e787      	b.n	8005d38 <__kernel_rem_pio2f+0x150>
 8005e28:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8005e2c:	e7f5      	b.n	8005e1a <__kernel_rem_pio2f+0x232>
 8005e2e:	f104 3cff 	add.w	ip, r4, #4294967295
 8005e32:	aa08      	add	r2, sp, #32
 8005e34:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005e38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e3c:	a908      	add	r1, sp, #32
 8005e3e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8005e42:	e781      	b.n	8005d48 <__kernel_rem_pio2f+0x160>
 8005e44:	f104 3cff 	add.w	ip, r4, #4294967295
 8005e48:	aa08      	add	r2, sp, #32
 8005e4a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005e4e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005e52:	e7f3      	b.n	8005e3c <__kernel_rem_pio2f+0x254>
 8005e54:	a908      	add	r1, sp, #32
 8005e56:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005e5a:	3801      	subs	r0, #1
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	e7ab      	b.n	8005db8 <__kernel_rem_pio2f+0x1d0>
 8005e60:	3201      	adds	r2, #1
 8005e62:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8005e66:	2e00      	cmp	r6, #0
 8005e68:	d0fa      	beq.n	8005e60 <__kernel_rem_pio2f+0x278>
 8005e6a:	9905      	ldr	r1, [sp, #20]
 8005e6c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8005e70:	eb0d 0001 	add.w	r0, sp, r1
 8005e74:	18e6      	adds	r6, r4, r3
 8005e76:	a91c      	add	r1, sp, #112	@ 0x70
 8005e78:	f104 0c01 	add.w	ip, r4, #1
 8005e7c:	384c      	subs	r0, #76	@ 0x4c
 8005e7e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8005e82:	4422      	add	r2, r4
 8005e84:	4562      	cmp	r2, ip
 8005e86:	da04      	bge.n	8005e92 <__kernel_rem_pio2f+0x2aa>
 8005e88:	4614      	mov	r4, r2
 8005e8a:	e710      	b.n	8005cae <__kernel_rem_pio2f+0xc6>
 8005e8c:	9804      	ldr	r0, [sp, #16]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	e7e7      	b.n	8005e62 <__kernel_rem_pio2f+0x27a>
 8005e92:	9903      	ldr	r1, [sp, #12]
 8005e94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005e98:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8005e9c:	9105      	str	r1, [sp, #20]
 8005e9e:	ee07 1a90 	vmov	s15, r1
 8005ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ea6:	2400      	movs	r4, #0
 8005ea8:	ece6 7a01 	vstmia	r6!, {s15}
 8005eac:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8005ee0 <__kernel_rem_pio2f+0x2f8>
 8005eb0:	46b1      	mov	r9, r6
 8005eb2:	455c      	cmp	r4, fp
 8005eb4:	dd04      	ble.n	8005ec0 <__kernel_rem_pio2f+0x2d8>
 8005eb6:	ece0 7a01 	vstmia	r0!, {s15}
 8005eba:	f10c 0c01 	add.w	ip, ip, #1
 8005ebe:	e7e1      	b.n	8005e84 <__kernel_rem_pio2f+0x29c>
 8005ec0:	ecfe 6a01 	vldmia	lr!, {s13}
 8005ec4:	ed39 7a01 	vldmdb	r9!, {s14}
 8005ec8:	3401      	adds	r4, #1
 8005eca:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005ece:	e7f0      	b.n	8005eb2 <__kernel_rem_pio2f+0x2ca>
 8005ed0:	08006638 	.word	0x08006638
 8005ed4:	0800660c 	.word	0x0800660c
 8005ed8:	43800000 	.word	0x43800000
 8005edc:	3b800000 	.word	0x3b800000
 8005ee0:	00000000 	.word	0x00000000
 8005ee4:	9b02      	ldr	r3, [sp, #8]
 8005ee6:	eeb0 0a48 	vmov.f32	s0, s16
 8005eea:	eba3 0008 	sub.w	r0, r3, r8
 8005eee:	f000 f8e3 	bl	80060b8 <scalbnf>
 8005ef2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8005ed8 <__kernel_rem_pio2f+0x2f0>
 8005ef6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efe:	db19      	blt.n	8005f34 <__kernel_rem_pio2f+0x34c>
 8005f00:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8005edc <__kernel_rem_pio2f+0x2f4>
 8005f04:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005f08:	aa08      	add	r2, sp, #32
 8005f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f0e:	3508      	adds	r5, #8
 8005f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f14:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f1c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005f20:	ee10 3a10 	vmov	r3, s0
 8005f24:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005f28:	ee17 3a90 	vmov	r3, s15
 8005f2c:	3401      	adds	r4, #1
 8005f2e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005f32:	e74c      	b.n	8005dce <__kernel_rem_pio2f+0x1e6>
 8005f34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005f38:	aa08      	add	r2, sp, #32
 8005f3a:	ee10 3a10 	vmov	r3, s0
 8005f3e:	e7f6      	b.n	8005f2e <__kernel_rem_pio2f+0x346>
 8005f40:	a808      	add	r0, sp, #32
 8005f42:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005f46:	9001      	str	r0, [sp, #4]
 8005f48:	ee07 0a90 	vmov	s15, r0
 8005f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f50:	3b01      	subs	r3, #1
 8005f52:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005f56:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005f5a:	ed62 7a01 	vstmdb	r2!, {s15}
 8005f5e:	e743      	b.n	8005de8 <__kernel_rem_pio2f+0x200>
 8005f60:	ecfc 6a01 	vldmia	ip!, {s13}
 8005f64:	ecb5 7a01 	vldmia	r5!, {s14}
 8005f68:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	4550      	cmp	r0, sl
 8005f70:	dc01      	bgt.n	8005f76 <__kernel_rem_pio2f+0x38e>
 8005f72:	4290      	cmp	r0, r2
 8005f74:	ddf4      	ble.n	8005f60 <__kernel_rem_pio2f+0x378>
 8005f76:	a858      	add	r0, sp, #352	@ 0x160
 8005f78:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005f7c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8005f80:	3b01      	subs	r3, #1
 8005f82:	e735      	b.n	8005df0 <__kernel_rem_pio2f+0x208>
 8005f84:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	dc09      	bgt.n	8005f9e <__kernel_rem_pio2f+0x3b6>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dc27      	bgt.n	8005fde <__kernel_rem_pio2f+0x3f6>
 8005f8e:	d040      	beq.n	8006012 <__kernel_rem_pio2f+0x42a>
 8005f90:	f009 0007 	and.w	r0, r9, #7
 8005f94:	b059      	add	sp, #356	@ 0x164
 8005f96:	ecbd 8b04 	vpop	{d8-d9}
 8005f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d1f5      	bne.n	8005f90 <__kernel_rem_pio2f+0x3a8>
 8005fa4:	aa30      	add	r2, sp, #192	@ 0xc0
 8005fa6:	1f0b      	subs	r3, r1, #4
 8005fa8:	4413      	add	r3, r2
 8005faa:	461a      	mov	r2, r3
 8005fac:	4620      	mov	r0, r4
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	dc50      	bgt.n	8006054 <__kernel_rem_pio2f+0x46c>
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	2a01      	cmp	r2, #1
 8005fb6:	dc5d      	bgt.n	8006074 <__kernel_rem_pio2f+0x48c>
 8005fb8:	ab30      	add	r3, sp, #192	@ 0xc0
 8005fba:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8005ee0 <__kernel_rem_pio2f+0x2f8>
 8005fbe:	440b      	add	r3, r1
 8005fc0:	2c01      	cmp	r4, #1
 8005fc2:	dc67      	bgt.n	8006094 <__kernel_rem_pio2f+0x4ac>
 8005fc4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8005fc8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8005fcc:	2e00      	cmp	r6, #0
 8005fce:	d167      	bne.n	80060a0 <__kernel_rem_pio2f+0x4b8>
 8005fd0:	edc7 6a00 	vstr	s13, [r7]
 8005fd4:	ed87 7a01 	vstr	s14, [r7, #4]
 8005fd8:	edc7 7a02 	vstr	s15, [r7, #8]
 8005fdc:	e7d8      	b.n	8005f90 <__kernel_rem_pio2f+0x3a8>
 8005fde:	ab30      	add	r3, sp, #192	@ 0xc0
 8005fe0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8005ee0 <__kernel_rem_pio2f+0x2f8>
 8005fe4:	440b      	add	r3, r1
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	da24      	bge.n	8006036 <__kernel_rem_pio2f+0x44e>
 8005fec:	b34e      	cbz	r6, 8006042 <__kernel_rem_pio2f+0x45a>
 8005fee:	eef1 7a47 	vneg.f32	s15, s14
 8005ff2:	edc7 7a00 	vstr	s15, [r7]
 8005ff6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8005ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ffe:	aa31      	add	r2, sp, #196	@ 0xc4
 8006000:	2301      	movs	r3, #1
 8006002:	429c      	cmp	r4, r3
 8006004:	da20      	bge.n	8006048 <__kernel_rem_pio2f+0x460>
 8006006:	b10e      	cbz	r6, 800600c <__kernel_rem_pio2f+0x424>
 8006008:	eef1 7a67 	vneg.f32	s15, s15
 800600c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006010:	e7be      	b.n	8005f90 <__kernel_rem_pio2f+0x3a8>
 8006012:	ab30      	add	r3, sp, #192	@ 0xc0
 8006014:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8005ee0 <__kernel_rem_pio2f+0x2f8>
 8006018:	440b      	add	r3, r1
 800601a:	2c00      	cmp	r4, #0
 800601c:	da05      	bge.n	800602a <__kernel_rem_pio2f+0x442>
 800601e:	b10e      	cbz	r6, 8006024 <__kernel_rem_pio2f+0x43c>
 8006020:	eef1 7a67 	vneg.f32	s15, s15
 8006024:	edc7 7a00 	vstr	s15, [r7]
 8006028:	e7b2      	b.n	8005f90 <__kernel_rem_pio2f+0x3a8>
 800602a:	ed33 7a01 	vldmdb	r3!, {s14}
 800602e:	3c01      	subs	r4, #1
 8006030:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006034:	e7f1      	b.n	800601a <__kernel_rem_pio2f+0x432>
 8006036:	ed73 7a01 	vldmdb	r3!, {s15}
 800603a:	3a01      	subs	r2, #1
 800603c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006040:	e7d2      	b.n	8005fe8 <__kernel_rem_pio2f+0x400>
 8006042:	eef0 7a47 	vmov.f32	s15, s14
 8006046:	e7d4      	b.n	8005ff2 <__kernel_rem_pio2f+0x40a>
 8006048:	ecb2 7a01 	vldmia	r2!, {s14}
 800604c:	3301      	adds	r3, #1
 800604e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006052:	e7d6      	b.n	8006002 <__kernel_rem_pio2f+0x41a>
 8006054:	ed72 7a01 	vldmdb	r2!, {s15}
 8006058:	edd2 6a01 	vldr	s13, [r2, #4]
 800605c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006060:	3801      	subs	r0, #1
 8006062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006066:	ed82 7a00 	vstr	s14, [r2]
 800606a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606e:	edc2 7a01 	vstr	s15, [r2, #4]
 8006072:	e79c      	b.n	8005fae <__kernel_rem_pio2f+0x3c6>
 8006074:	ed73 7a01 	vldmdb	r3!, {s15}
 8006078:	edd3 6a01 	vldr	s13, [r3, #4]
 800607c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006080:	3a01      	subs	r2, #1
 8006082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006086:	ed83 7a00 	vstr	s14, [r3]
 800608a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608e:	edc3 7a01 	vstr	s15, [r3, #4]
 8006092:	e78f      	b.n	8005fb4 <__kernel_rem_pio2f+0x3cc>
 8006094:	ed33 7a01 	vldmdb	r3!, {s14}
 8006098:	3c01      	subs	r4, #1
 800609a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800609e:	e78f      	b.n	8005fc0 <__kernel_rem_pio2f+0x3d8>
 80060a0:	eef1 6a66 	vneg.f32	s13, s13
 80060a4:	eeb1 7a47 	vneg.f32	s14, s14
 80060a8:	edc7 6a00 	vstr	s13, [r7]
 80060ac:	ed87 7a01 	vstr	s14, [r7, #4]
 80060b0:	eef1 7a67 	vneg.f32	s15, s15
 80060b4:	e790      	b.n	8005fd8 <__kernel_rem_pio2f+0x3f0>
 80060b6:	bf00      	nop

080060b8 <scalbnf>:
 80060b8:	ee10 3a10 	vmov	r3, s0
 80060bc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80060c0:	d02b      	beq.n	800611a <scalbnf+0x62>
 80060c2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80060c6:	d302      	bcc.n	80060ce <scalbnf+0x16>
 80060c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80060cc:	4770      	bx	lr
 80060ce:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80060d2:	d123      	bne.n	800611c <scalbnf+0x64>
 80060d4:	4b24      	ldr	r3, [pc, #144]	@ (8006168 <scalbnf+0xb0>)
 80060d6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800616c <scalbnf+0xb4>
 80060da:	4298      	cmp	r0, r3
 80060dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80060e0:	db17      	blt.n	8006112 <scalbnf+0x5a>
 80060e2:	ee10 3a10 	vmov	r3, s0
 80060e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80060ea:	3a19      	subs	r2, #25
 80060ec:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80060f0:	4288      	cmp	r0, r1
 80060f2:	dd15      	ble.n	8006120 <scalbnf+0x68>
 80060f4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8006170 <scalbnf+0xb8>
 80060f8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8006174 <scalbnf+0xbc>
 80060fc:	ee10 3a10 	vmov	r3, s0
 8006100:	eeb0 7a67 	vmov.f32	s14, s15
 8006104:	2b00      	cmp	r3, #0
 8006106:	bfb8      	it	lt
 8006108:	eef0 7a66 	vmovlt.f32	s15, s13
 800610c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006110:	4770      	bx	lr
 8006112:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006178 <scalbnf+0xc0>
 8006116:	ee27 0a80 	vmul.f32	s0, s15, s0
 800611a:	4770      	bx	lr
 800611c:	0dd2      	lsrs	r2, r2, #23
 800611e:	e7e5      	b.n	80060ec <scalbnf+0x34>
 8006120:	4410      	add	r0, r2
 8006122:	28fe      	cmp	r0, #254	@ 0xfe
 8006124:	dce6      	bgt.n	80060f4 <scalbnf+0x3c>
 8006126:	2800      	cmp	r0, #0
 8006128:	dd06      	ble.n	8006138 <scalbnf+0x80>
 800612a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800612e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006132:	ee00 3a10 	vmov	s0, r3
 8006136:	4770      	bx	lr
 8006138:	f110 0f16 	cmn.w	r0, #22
 800613c:	da09      	bge.n	8006152 <scalbnf+0x9a>
 800613e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8006178 <scalbnf+0xc0>
 8006142:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800617c <scalbnf+0xc4>
 8006146:	ee10 3a10 	vmov	r3, s0
 800614a:	eeb0 7a67 	vmov.f32	s14, s15
 800614e:	2b00      	cmp	r3, #0
 8006150:	e7d9      	b.n	8006106 <scalbnf+0x4e>
 8006152:	3019      	adds	r0, #25
 8006154:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006158:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800615c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006180 <scalbnf+0xc8>
 8006160:	ee07 3a90 	vmov	s15, r3
 8006164:	e7d7      	b.n	8006116 <scalbnf+0x5e>
 8006166:	bf00      	nop
 8006168:	ffff3cb0 	.word	0xffff3cb0
 800616c:	4c000000 	.word	0x4c000000
 8006170:	7149f2ca 	.word	0x7149f2ca
 8006174:	f149f2ca 	.word	0xf149f2ca
 8006178:	0da24260 	.word	0x0da24260
 800617c:	8da24260 	.word	0x8da24260
 8006180:	33000000 	.word	0x33000000

08006184 <floorf>:
 8006184:	ee10 3a10 	vmov	r3, s0
 8006188:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800618c:	3a7f      	subs	r2, #127	@ 0x7f
 800618e:	2a16      	cmp	r2, #22
 8006190:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006194:	dc2b      	bgt.n	80061ee <floorf+0x6a>
 8006196:	2a00      	cmp	r2, #0
 8006198:	da12      	bge.n	80061c0 <floorf+0x3c>
 800619a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006200 <floorf+0x7c>
 800619e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80061a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80061a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061aa:	dd06      	ble.n	80061ba <floorf+0x36>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	da24      	bge.n	80061fa <floorf+0x76>
 80061b0:	2900      	cmp	r1, #0
 80061b2:	4b14      	ldr	r3, [pc, #80]	@ (8006204 <floorf+0x80>)
 80061b4:	bf08      	it	eq
 80061b6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80061ba:	ee00 3a10 	vmov	s0, r3
 80061be:	4770      	bx	lr
 80061c0:	4911      	ldr	r1, [pc, #68]	@ (8006208 <floorf+0x84>)
 80061c2:	4111      	asrs	r1, r2
 80061c4:	420b      	tst	r3, r1
 80061c6:	d0fa      	beq.n	80061be <floorf+0x3a>
 80061c8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8006200 <floorf+0x7c>
 80061cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80061d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80061d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d8:	ddef      	ble.n	80061ba <floorf+0x36>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bfbe      	ittt	lt
 80061de:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80061e2:	fa40 f202 	asrlt.w	r2, r0, r2
 80061e6:	189b      	addlt	r3, r3, r2
 80061e8:	ea23 0301 	bic.w	r3, r3, r1
 80061ec:	e7e5      	b.n	80061ba <floorf+0x36>
 80061ee:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80061f2:	d3e4      	bcc.n	80061be <floorf+0x3a>
 80061f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80061f8:	4770      	bx	lr
 80061fa:	2300      	movs	r3, #0
 80061fc:	e7dd      	b.n	80061ba <floorf+0x36>
 80061fe:	bf00      	nop
 8006200:	7149f2ca 	.word	0x7149f2ca
 8006204:	bf800000 	.word	0xbf800000
 8006208:	007fffff 	.word	0x007fffff

0800620c <_init>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	bf00      	nop
 8006210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006212:	bc08      	pop	{r3}
 8006214:	469e      	mov	lr, r3
 8006216:	4770      	bx	lr

08006218 <_fini>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	bf00      	nop
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr
